<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_reverse_tag</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialisation et placement
image_speed=0;
image_index=0;
Final="";
value=0;
ID=0;
dir_y=0;
pos=0;
OBJECTIVE="";
y=(sprite_height/2);
y+=sprite_height*(instance_number(object_part)-1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///La valeur à été transmise, il est temps de définir ce qu'il y a à l'intérieur du bouton.
switch(ID){
    case TITLE:
        get_text("Quel titre ?","NOONE");
        break;
        
    case PURPLE_SUB_TITLE:
        get_text("Quel sous titre violet ?","NOONE");
        break;
    
    case SUB_TITLE:
        get_text("Quel sous titre ?","NOONE");
        break;
        
    case PURPLE_LITTLE_TITLE:
        get_text("Quel petit titre violet ?","NOONE");
        break;
        
    case LITTLE_TITLE:
        get_text("Quel petit titre ?","NOONE");
        break;
        
    case SYNTAX:
        get_text("Quelle texte syntaxé ?","NOONE");
        break;
    case FUNCTION_TABLE:
        for(i=0;i&gt;-1;i++){
            Temp=get_string("Quel Argument ?","NOONE");
            switch(Temp){
                case "NOONE":
                case "NONE":
                case "noone":
                case "none":
                case "&lt;null&gt;":
                    Temp="";
                    break;
                }
            
            if Temp != ""{
                Final[i,0]=Temp;
                Final[i,1]=get_string("Quel type d'argument ?","NOONE");
                Final[i,2]=get_string("Quel description ?","NOONE");
                }
            else{
                //On n'a pas mis d'argument, go s'arêtter.
                if i=0{instance_destroy();}
                i= -40;
                }
            }
        break;
        
    case PICTURE:
        Final= get_open_filename("Image files|*.png;*.jpg;*.jpeg;*.gif","");
        if Final != ""{ //Si l'on a séléctionné un fichier 
            file_copy(Final,IMG_DIR + "tmp/"+filename_name(Final));
            Final=filename_name(Final);
            }
        else{
            instance_destroy(); //Si on a pas d'image notre présence ne possède pas d'utilité.
            }
        break;
        
        
    case TEXT:
        get_text("Quel paragraphe ?", "NOONE");
        break;
        
    case CONSTANTS_TABLE:
        for(i=0;i&gt;-1;i++){
            Temp=get_string("Quelle Constante ?","NOONE");
            switch(Temp){
                case "NOONE":
                case "NONE":
                case "noone":
                case "none":
                case "&lt;null&gt;":
                    Temp="";
                    break;
                }
            
            if Temp != ""{
                Final[i,0]=Temp;
                Final[i,1]=get_string("Explication ?","NOONE");
                }
            else{
                //On n'a pas mis d'argument, go s'arêtter.
                if i=0{instance_destroy();}
                i= -40;
                }
            }
        break;


    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gestion de l'apparence/fonction de la partie.
if value != 0{
    //On tempo juste pour voir le nom charger sur le sprite:
    ID=value;
    value=0;
    alarm_set(0,2);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Placement
if global.pressedID = ""{
    if mouse_x &gt;= x-(sprite_width/2) &amp;&amp; mouse_y &gt;= y-(sprite_height/2) &amp;&amp; mouse_y &lt;= y+(sprite_height/2){
        //La souris est sur notre position:
        //Placement horizontal:
        if abs(view_xview[0]+view_wview[0]-80-x) &lt; 0.4{
            x= view_xview[0]+view_wview[0]-80;
            }
        else{
            x+= (view_xview[0]+view_wview[0]-80-x)/8;
            }
    
        }
    else{
        //La souris n'est pas sur notre position
        //Placement Horizontal:
        if abs(view_xview[0]+view_wview[0]-60-x) &lt; 0.4{
            x= view_xview[0]+view_wview[0]-60;
            }
        else{
            x+= (view_xview[0]+view_wview[0]-60-x)/8;
            } 
        }
    }
else{
    if global.pressedID!=id{ //On se range lors de la réorganisation.
        if abs(view_xview[0]+view_wview[0]-60-x) &lt; 0.4{
            x= view_xview[0]+view_wview[0]-60;
            }
        else{
            x+= (view_xview[0]+view_wview[0]-60-x)/8;
            }
        }
    }
    
    
///Vertical
if global.pressedID!=id{
    if global.pressedID!=""{//Il y a un élu:
        if !instance_exists(object_slider_cat){
            tmp=sign(global.pressedID.y-y);
            if tmp=0{tmp=pos;}
            if tmp=pos{
                OBJECTIVE=y-(sprite_height*pos);
                pos*= -1;
                }
            }
        
        }
    else{
        //Si on a pas d'élu:
        if OBJECTIVE = ""{
            repeat(5){
                if collision_rectangle(x-150,y-(sprite_height/2)-1,view_xview[0]+view_wview[0],y-(sprite_height/2)+1,object_part,false,true) = noone{
                    y--;
                    }
                else{
                    if collision_rectangle(x-150,y-(sprite_height/2),view_xview[0]+view_wview[0],y+(sprite_height/2),object_category,false,true) != noone{
                        y++;
                        }
                    }
                tmp=collision_rectangle(x-150,y+(sprite_height/2)-1,view_xview[0]+view_wview[0],y+(sprite_height/2),object_part,false,true);
                if tmp != noone{
                    tmp.y++;
                    }
                }
            }
        }
    
    y=clamp(y,sprite_height/2,view_yview[0]+view_hview[0]-(sprite_height/2));
    }
    
if OBJECTIVE != ""{
    if abs(OBJECTIVE-y) &lt; 0.4{
        y=OBJECTIVE;
        OBJECTIVE="";
        }
    else{
        y+= (OBJECTIVE-y)/5;
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On enlève l'id de l'élu et la corbeille.
if global.pressedID=id{
    if place_meeting(x,y,object_bin){instance_destroy();}
    
    global.pressedID="";    
    instance_destroy(object_bin);
    dir_y=0;
    depth=0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Définission de "pos"
if global.pressedID!=id{
    if global.pressedID.y&lt;y{
        pos=1; //L'élu est au dessus du bloc;
        }
    else{
        pos= -1; //L'élu est en dessous du bloc;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----PLACEMENT DE L'ELU-----
if global.pressedID=id{
    y=mouse_y-dir_y;
    y=clamp(y,0,view_yview[0]+view_hview[0]-(sprite_height/2));
    if abs((view_xview[0]+view_wview[0]-210)-x) &lt; 0.4{
        x=(view_xview[0]+view_wview[0]-210);
        }
    else{
        x+=((view_xview[0]+view_wview[0]-210)-x)/8;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Modification de valeur ultérieurement définies.
switch(ID){
    case TITLE:
        get_text("Quel titre ?",Final);
        break;
        
    case PURPLE_SUB_TITLE:
        get_text("Quel sous titre violet ?",Final);
        break;
    
    case SUB_TITLE:
        get_text("Quel sous titre ?",Final);
        break;
        
    case PURPLE_LITTLE_TITLE:
        get_text("Quel petit titre violet ?",Final);
        break;
        
    case LITTLE_TITLE:
        get_text("Quel petit titre ?",Final);
        break;
        
    case SYNTAX:
        get_text("Quelle texte syntaxé ?",Final);
        break;
        
    case FUNCTION_TABLE:
        for(i=0;i&gt;-1;i++){
            Temp=get_string("Quel Argument ?","NOONE");
            switch(Temp){
                case "NOONE":
                case "NONE":
                case "noone":
                case "none":
                case "&lt;null&gt;":
                    Temp="";
                    break;
                }
            
            if Temp != ""{
                Final[i,0]=Temp;
                Final[i,1]=get_string("Quel type d'argument ?","NOONE");
                Final[i,2]=get_string("Quel description ?","NOONE");
                }
            else{
                //On n'a pas mis d'argument, go s'arêtter.
                if i=0{instance_destroy();}
                i= -40;
                }
            }
        break;
        
    case PICTURE:
        Final= get_open_filename("Image files|*.png;*.jpg;*.jpeg;*.gif","");
        if Final != ""{ //Si l'on a séléctionné un fichier 
            file_copy(Final,working_directory+"Docs/images/tmp/"+filename_name(Final));
            Final=filename_name(Final);
            }
        else{
            instance_destroy(); //Si on a pas d'image noter présence ne possède pas d'utilité.
            }
        break;
        
    case TEXT:
        get_text("Quel paragraphe ?",Final);
        break;


    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(object_slider_cat){
    global.pressedID=id;
    dir_y=mouse_y-y;
    depth=10;
    
    instance_create(room_width-(sprite_width*1.5),room_height-32,object_bin)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Affichage des valeurs, choix des couleurs et tags infinis
draw_self();
//Choix de la couleur:
if mouse_x &gt;= x-(sprite_width/2) &amp;&amp; mouse_y &gt;= y-(sprite_height/2) &amp;&amp; mouse_y &lt;= y+(sprite_height/2){
    if global.pressedID= ""{
        draw_set_color(c_red);
        }
    else{
        if global.pressedID=id{
            draw_set_color(c_red);
            }
        else{
            draw_set_color(object_deadzone.font_green);
            }
        }
        
    }
else{
    draw_set_color(object_deadzone.font_green);
    }
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
//Draw values 
if value = 0{
    if !instance_exists(object_slider_cat){
        switch(ID){
        
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 8:
            case 9:
                draw_text(room_width/2,y,Final);
                break;
            
            case 7:
                if is_array(Final){
                    if array_length_2d(Final,0) = 3{
                        draw_text(room_width/2,y,Final[0,0]+"/"+Final[0,1]+"/"+Final[0,2]);
                        }
                    }
                break;
                
            }
        }
        
    switch(ID){
        case 1:
            draw_text(x,y,"Titre");
            break;
        case 2:
            draw_text(x,y,"Sous Titre#Violet");
            break;
        case 3:
            draw_text(x,y,"Sous Titre");
            break;
        case 4:
            draw_text(x,y,"Petit Titre#Violet");
            break;
        case 5:
            draw_text(x,y,"Petit Titre");
            break;
        case 6:
            draw_text(x,y,"Texte#Syntaxé");
            break;
        case 7:
            draw_text(x,y,"Tableau de#Fonction");
            break;
        case 8:
            draw_text(x,y,"Image");
            break;
        case 9:
            draw_text(x,y,"Texte#Simple");
            break;
        
            }
        }
//Dessiner la continuité du tag:
if global.pressedID=id || x &lt; view_xview[0]+view_wview[0]-80{
    //Deux lignes+un rectangle
    draw_set_colour(object_deadzone.line_tag);
    draw_line(bbox_right,bbox_top+4,view_xview[0]+view_wview[0],bbox_top+4);
    draw_line(bbox_right,bbox_bottom-4,view_xview[0]+view_wview[0],bbox_bottom-4);
    draw_set_color(object_deadzone.second_line_tag);
    draw_line(bbox_right-2,bbox_bottom-3,view_xview[0]+view_wview[0]-3,bbox_bottom-3);
    
    draw_set_color(c_white);
    draw_rectangle(bbox_right,bbox_top+5,view_xview[0]+view_wview[0],bbox_bottom-5,false);
    
    }
        
    
           
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
