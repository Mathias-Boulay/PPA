<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_level_builder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Code de construction V1 (never finished)
/*
//Open the ini file 
ini_open("Sunset Forest.ini");

//Constructor for walls:
var xw;
var yw;
var sw;
var Thiswall;
xw = 1;
yw = xw + 1;
sw = yw +1;
repeat (ini_read_real('walls','number',0))
    {
    This_wall = instance_create(ini_read_real('walls',string(xw),0),ini_read_real('walls',string(yw),0),object_wall);
    This_wall.image_index = ini_read_real('walls',string(sw),0);
    xw += 3;
    yw = xw + 1;
    sw = yw +1;
    }

//Constructor for simple platforms:
var xp;
var yp;
var sp;
var This_platform;
xp = 1;
yp = xp + 1;
sp = yp = 1;
repeat (ini_read_real('platforms','number',0))
    {
    This_platform = instance_create(ini_read_real('platforms',string(xp),0),ini_read_real('platforms',string(yp),0),object_platform);
    This_platform.image_index = ini_read_real('platforms',string(yp),0);
    xp += 2;
    yp = xp + 1;
    sp = yp +1;
    }


//Constructor for horizontal platforms:
var xhp;
var yhp;
var shp;
var This_horizontal_platform;
xhp = 1;
yhp = xhp + 1;
shp = yhp +1;
repeat (ini_read_real('horizontal-platforms','number',0))
    {
    This_horizontal_platform = instance_create(ini_read_real('horizontal-platforms',string(xhp),0),ini_read_real('horizontal-platforms',string(yhp),0),object_platform);
    This_horizontal_platform.image_index = ini_read_real('horizontal-platforms',string(shp),0);
    xhp += 2;
    yhp = xhp + 1;
    shp = yhp +1;
    }

//Constructor for vertical platforms:
var xvp;
var yvp;
var svp;
var This_vertical_platform
xvp = 1;
yvp = xvp + 1;
svp = yvp + 1;
repeat (ini_read_real('vertical-platforms','number',0))
    {
    This_vertical_platform = instance_create(ini_read_real('vertical-platforms',string(xvp),0),ini_read_real('vertical-platforms',string(yvp),0),object_platform);
    This_vertical_platform.image_index = ini_read_real('vertical-platforms',string(svp),0);
    xvp += 2;
    yvp = xvp + 1;
    svp = yvp + 1;
    }

//Constructor for Rionys:
var xr;
var yr;
xr = 1;
yr = xr + 1;
repeat (ini_read_real('Rionys','number',0))
    {
    instance_create(ini_read_real('Rionys',string(xr),0),ini_read_real('Rionys',string(yr),0),object_platform);
    xr += 2;
    yr = xr + 1;
    }

//Constructor for sellers
var xv;
var yv;
var sv;
var stv;
var case1;
var case2;
var case3;
var case1price;
var case2price;
var case3price;
var This_seller;
xv = 1;
yv = xv+1;
sv = yv+1;
svt = sv +1;
case1 = ini_read_real('sellers',string(irandom_range(svt+1,svt+3)),0);
case2 = ini_read_real('sellers',string(irandom_range(svt+4,svt+6)),0);
case3 = ini_read_real('sellers',string(irandom_range(svt+7,svt+9)),0);
case1price = ini_read_real('sellers',string(svt+10),0);
case2price = ini_read_real('sellers',string(svt+11),0);
case3price = ini_read_real('sellers',string(svt+12),0);
repeat(ini_read_real('sellers','number',0))
    {
    This_seller = instance_create(ini_read_real('sellers',string(xv),0),ini_read_real('sellers',string(yv),0),object_seller);
    This_seller.image_index = ini_read_real('sellers',string(sv),0);
    This_seller.vendor_index = ini_read_real('sellers',string(svt),0);
    This_seller.case1 = case1;
    This_seller.case2 = case2;
    This_seller.case3 = case3;
    This_seller.case1price = case1price;
    This_seller.case2price = case2price;
    This_seller.case3price = case3price;
    xv += 15;
    yv = xv+1;
    sv = yv+1;
    case1 = ini_read_real('sellers',string(irandom_range(svt+1,svt+3)),0);
    case2 = ini_read_real('sellers',string(irandom_range(svt+4,svt+6)),0);
    case3 = ini_read_real('sellers',string(irandom_range(svt+7,svt+9)),0);
    case1price = ini_read_real('sellers',string(sv+10),0);
    case2price = ini_read_real('sellers',string(sv+11),0);
    case3price = ini_read_real('sellers',string(sv+12),0); 
    }
    
//Constructor for the ghosts spawner
var xgs;
var ygs;
var ghosts_state;
var ghosts_knowback;
var This_ghost_spawner;
var ghost_1;
var ghost_2;
var ghost_3;
xgs = 1;
ygs = xgs + 1;
ghosts_state = ygs + 1;
ghosts_knowback = ghosts_state +1;
ghost_1 = ghosts_knowback +1;
ghost_2 = ghost_1 +1;
ghost_3 = ghost_2 +1;
repeat(ini_read_real('ghosts-spawner','number',0))
    {
    This_ghost_spawner = instance_create(ini_read_real('ghosts-spawner',string(xgs),0),ini_read_real('ghosts-spawner',string(ygs),0),object_ghost_spawner);
    This_ghost_spawner.state = ini_read_string('ghosts-spawner',string(ghosts_state),"lifeproof");
    This_ghost_spawner.knowback = ini_read_real('ghosts-spawner',string(ghosts_knowback),1);
    This_ghost_spawner.ghost_1 = ini_read_string('ghosts-spawner',string(ghost_1),"oldy");
    This_ghost_spawner.ghost_2 = ini_read_string('ghosts-spawner',string(ghost_2),"oldy");
    This_ghost_spawner.ghost_3 = ini_read_string('ghosts-spawner',string(ghost_3),"oldy");
    }


ini_close();
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Code de Construction de niveau V2 (Documentation incluse):
/*
//Var réutilisées: global.SELECTED_SAVE,global.selected_level,global.selected_part.
//Ouverture du fichier depuis la variable globale:
ini_open(global.selected_level);

//Initialisation de l'environnement:
room_width = ini_read_real("Generic Informations",global.selected_part+"XSize",424);
room_height = ini_read_real("Generic Informations",global.selected_part+"YSize",240);
var xx;
var yy;
var Asset;
var SubAssets;
var WSpace;
var HSpace;
var WNumber;
var HNumber;
var Number;



//Mur Phase 1: createrectangle
Number = ini_read_real(global.selected_part,"RectangleNumber",0);
for(i=1;i&lt;=Number;i++){
    //Définition des variables
    xx = ini_read_real(global.selected_part,string(i)+"-createrectangleXpos",0);
    yy = ini_read_real(global.selected_part,string(i)+"-createrectangleYpos",0);
    Asset = ini_read_string(global.selected_part,string(i)+"-createrectangleAssets","sample");
    SubAsset = ini_read_real(global.selected_part,string(i)+"-createrectangleSubAssets",0);
    WSpace = ini_read_real(global.selected_part,string(i)+"-createrectangleWSpace",0);
    HSpace = ini_read_real(global.selected_part,string(i)+"-createrectangleHSpace",0);
    WNumber = ini_read_real(global.selected_part,string(i)+"-createrectangleWNumber",0);
    HNumber = ini_read_real(global.selected_part,string(i)+"-createrectangleHNumber",0);  
    //Switch de colonne
    for(k=1;k&lt;=HNumber;k++){
        //Faire des lignes:
        for(j=1;j&lt;=WNumber;j++){
            ThisWall = instance_create(xx,yy,object_wall);
            ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
            ThisWall.image_index = SubAsset;
            xx += WSpace;
            } 
        yy += HSpace;
        xx -= WSpace*WNumber; 
        }
    }

//Mur Phase 2: createline
Number = ini_read_real(global.selected_part,"LineNumber",0);
for(i=1;i&lt;=Number;i++){
    //Définition des variables
    xx = ini_read_real(global.selected_part,string(i)+"-createlineXpos",0);
    yy = ini_read_real(global.selected_part,string(i)+"-createlineYpos",0);
    Asset = ini_read_string(global.selected_part,string(i)+"-createlineAssets","sample");
    SubAsset = ini_read_real(global.selected_part,string(i)+"-createlineSubAssets",0);
    WSpace = ini_read_real(global.selected_part,string(i)+"-createlineSpace",0);
    WNumber = ini_read_real(global.selected_part,string(i)+"-createlineNumber",0);  
    //Faire des lignes:
    for(j=1;j&lt;=WNumber;j++){
        ThisWall = instance_create(xx,yy,object_wall);
        ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
        ThisWall.image_index = SubAsset;
        xx += WSpace;
        }
    }


//Mur Phase 3: createcolumn
Number = ini_read_real(global.selected_part,"LineNumber",0);
for(i=1;i&lt;=Number;i++){
    //Définition des variables
    xx = ini_read_real(global.selected_part,string(i)+"-createcolumnXpos",0);
    yy = ini_read_real(global.selected_part,string(i)+"-createcolumnYpos",0);
    Asset = ini_read_string(global.selected_part,string(i)+"-createcolumnAssets","sample");
    SubAsset = ini_read_real(global.selected_part,string(i)+"-createcolumnSubAssets",0);
    HSpace = ini_read_real(global.selected_part,string(i)+"-createcolumnSpace",0);
    HNumber = ini_read_real(global.selected_part,string(i)+"-createcolumnNumber",0);  
    //Faire des lignes:
    for(j=1;j&lt;=HNumber;j++){
        ThisWall = instance_create(xx,yy,object_wall);
        ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
        ThisWall.image_index = SubAsset;
        yy += HSpace;
        }
    }
    
    
//Phase Joueur:  ! IAHSMAI
Number = ini_read_real(global.selected_part,"ShaiNumber",0);
for(i=1;i&lt;=Number;i++){
    xx = ini_read_real(global.selected_part,string(i)+"-ShaiXpos",0);
    yy = ini_read_real(global.selected_part,string(i)+"-ShaiYpos",0);
    instance_create(xx,yy,object_player);
    }
    


*/





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test de V3 (onelinecreation)
///Code de Construction de niveau V2 (Documentation incluse):
//Var réutilisées: global.SELECTED_SAVE,global.selected_level,global.selected_part.
//Ouverture du fichier depuis la variable globale:
ini_open(global.selected_level);

//Initialisation de l'environnement:
room_width = ini_read_real("Generic Informations",global.selected_part+"XSize",424);
room_height = ini_read_real("Generic Informations",global.selected_part+"YSize",240);

//Déclarations des variables locales:
var xx;
var yy;
var Asset;
var SubAssets;
var WSpace;
var HSpace;
var WNumber;
var HNumber;
var Number;
var original;

//Déclaration des variables globales:
global.grav="";
global.jumpspeed="";
global.movespeed="";
global.frict="";
global.time_left="";
global.bossfight="";


original = ini_read_string(global.selected_part,"Worldsettings","(0.3,5.75,8,0.10,666,0)");
original = string_replace(original,"(","");
for(j=1;j&gt;-1;j++){ //For gravity:
        if string_char_at(original,1) != ","{
            global.grav += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.grav= "+global.grav);
            show_debug_message("original= "+original);
            global.grav = real(global.grav);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For jumpspeed:
        if string_char_at(original,1) != ","{
            global.jumpspeed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.jumpspeed= "+global.jumpspeed);
            show_debug_message("original= "+original);
            global.jumpspeed = real(global.jumpspeed);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For movespeed:
        if string_char_at(original,1) != ","{
            global.movespeed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.movespeed= "+global.movespeed);
            show_debug_message("original= "+original);
            global.movespeed = real(global.movespeed);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For friction:
        if string_char_at(original,1) != ","{
            global.frict += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.frict= "+global.frict);
            show_debug_message("original= "+original);
            global.frict = real(global.frict);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For time in seconds:
        if string_char_at(original,1) != ","{
            global.time_left += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.time_left= "+global.time_left);
            show_debug_message("original= "+original);
            global.time_left = real(global.time_left);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For bossfight ?:
        if string_char_at(original,1) != ")"{
            global.bossfight += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.bossfight= "+global.bossfight);
            show_debug_message("original= "+original);
            global.bossfight = real(global.bossfight);
            j = -10;
            }
        }


//Mur Phase 1: createrectangle
Number = ini_read_real(global.selected_part,"RectangleNumber",0);
for(i=1;i&lt;=Number;i++){
    xx ="";
    yy ="";
    Asset="";
    SubAsset="";
    WSpace="";
    HSpace="";
    WNumber="";
    HNumber="";
    original = ini_read_string(global.selected_part,string(i)+"-createrectangle","(0,0,sample,2,36,36,0,0)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WSpace:
        if string_char_at(original,1) != ","{
            WSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("WSpace= "+WSpace);
            show_debug_message("original= "+original);
            WSpace = real(WSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HSpace:
        if string_char_at(original,1) != ","{
            HSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("HSpace= "+HSpace);
            show_debug_message("original= "+original);
            HSpace = real(HSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WNumber:
        if string_char_at(original,1) != ","{
            WNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("WNumber= "+WNumber);
            show_debug_message("original= "+original);
            WNumber = real(WNumber);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HNumber:
        if string_char_at(original,1) != ")"{
            HNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("HNumber= "+HNumber);
            show_debug_message("original= "+original);
            HNumber = real(HNumber);
            j = -10;
            }
        }
    //Switch de colonne
    for(k=1;k&lt;=HNumber;k++){
        //Faire des lignes:
        for(j=1;j&lt;=WNumber;j++){
            ThisWall = instance_create(xx,yy,object_wall);
            ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
            ThisWall.image_index = SubAsset;
            xx += WSpace;
            } 
        yy += HSpace;
        xx -= WSpace*WNumber; 
        }
    }
    
    
//Mur Phase 2: createline
Number = ini_read_real(global.selected_part,"LineNumber",0);
for(i=1;i&lt;=Number;i++){
    xx ="";
    yy ="";
    Asset="";
    SubAsset="";
    WSpace="";
    WNumber="";
    original = ini_read_string(global.selected_part,string(i)+"-createline","(0,0,sample,2,36,0)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WSpace:
        if string_char_at(original,1) != ","{
            WSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("WSpace= "+WSpace);
            show_debug_message("original= "+original);
            WSpace = real(WSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WNumber:
        if string_char_at(original,1) != ")"{
            WNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("WNumber= "+WNumber);
            show_debug_message("original= "+original);
            WNumber = real(WNumber);
            j = -10;
            }
        }  
    //Faire des lignes:
    for(j=1;j&lt;=WNumber;j++){
        ThisWall = instance_create(xx,yy,object_wall);
        ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
        ThisWall.image_index = SubAsset;
        xx += WSpace;
        }
    }
    
    
//Mur Phase 3: createcolumn
Number = ini_read_real(global.selected_part,"LineNumber",0);
for(i=1;i&lt;=Number;i++){
    xx ="";
    yy ="";
    Asset="";
    SubAsset="";
    HSpace="";
    HNumber="";
    original = ini_read_string(global.selected_part,string(i)+"-createcolumn","(0,0,sample,2,36,0)"); 
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HSpace:
        if string_char_at(original,1) != ","{
            HSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("HSpace= "+HSpace);
            show_debug_message("original= "+original);
            HSpace = real(HSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HNumber:
        if string_char_at(original,1) != ")"{
            HNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("HNumber= "+HNumber);
            show_debug_message("original= "+original);
            HNumber = real(HNumber);
            j = -10;
            }
        } 
    //Faire des lignes:
    for(j=1;j&lt;=HNumber;j++){
        ThisWall = instance_create(xx,yy,object_wall);
        ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
        ThisWall.image_index = SubAsset;
        yy += HSpace;
        }
    }
    
    

    
//Phase marchants: Juif Corp.
    
    
   
    
//Phase joueur: !IAHSMAI
Number = ini_read_real(global.selected_part,"ShaiNumber",0);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    original = ini_read_string(global.selected_part,string(i)+"-createshai","(0,0)"); 
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ")"{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    instance_create(xx,yy,object_player);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
