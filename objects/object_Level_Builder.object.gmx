<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_level_builder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Constructeur de niveau V-3.1 (Docs non incluse)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialisation de l'environnement
//Var réutilisées: global.SELECTED_SAVE,global.selected_level,global.selected_part.
show_debug_message("INITIALISATION DE L'ENVIRONNEMENT--------------------------------------------");

//Ouverture du fichier de niveau correspondant:
ini_open(global.selected_level);

//Phase d'initialisation de l'environnement:
room_width = ini_read_real("Generic Informations",global.selected_part+"XSize",424);
room_height = ini_read_real("Generic Informations",global.selected_part+"YSize",240);

//Déclarations des variables locales:
var xx;
var yy;
var Asset;
var SubAssets;
var WSpace;
var HSpace;
var WNumber;
var HNumber;
var Number;
var original;
//Var locales plus spécifiques aux vendeurs:
var case1a;
var case1b;
var case1c;
var case2a;
var case2b;
var case2c;
var case3a;
var case3b;
var case3c;
var case1aprice;
var case1bprice;
var case1cprice;
var case2aprice;
var case2bprice;
var case2cprice;
var case3aprice;
var case3bprice;
var case3cprice;
var case1apriceup;
var case1bpriceup;
var case1cpriceup;
var case2apriceup;
var case2bpriceup;
var case2cpriceup;
var case3apriceup;
var case3bpriceup;
var case3cpriceup;
//Variables locales utilisées par les plateformes:
var distance;
var dir;
var movespeed;


//Déclaration des variables globales utilisées principalement par le joueur:
global.grav="";
global.jumpspeed="";
global.movespeed="";
global.frict="";
global.time_left="";
global.bossfight="";

//Définition des variables globales utilisées principalement par le joueur:
original = ini_read_string(global.selected_part,"Worldsettings","(0.3,5.75,8,0.10,6000,0)");
original = string_replace(original,"(","");
for(j=1;j&gt;-1;j++){ //For gravity:
        if string_char_at(original,1) != ","{
            global.grav += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.grav= "+global.grav);
            show_debug_message("original= "+original);
            global.grav = real(global.grav);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For jumpspeed:
        if string_char_at(original,1) != ","{
            global.jumpspeed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.jumpspeed= "+global.jumpspeed);
            show_debug_message("original= "+original);
            global.jumpspeed = real(global.jumpspeed);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For movespeed:
        if string_char_at(original,1) != ","{
            global.movespeed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.movespeed= "+global.movespeed);
            show_debug_message("original= "+original);
            global.movespeed = real(global.movespeed);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For friction:
        if string_char_at(original,1) != ","{
            global.frict += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.frict= "+global.frict);
            show_debug_message("original= "+original);
            global.frict = real(global.frict);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For time in seconds:
        if string_char_at(original,1) != ","{
            global.time_left += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.time_left= "+global.time_left);
            show_debug_message("original= "+original);
            global.time_left = real(global.time_left);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For bossfight ?:
        if string_char_at(original,1) != ")"{
            global.bossfight += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.bossfight= "+global.bossfight);
            show_debug_message("original= "+original);
            global.bossfight = real(global.bossfight);
            j = -10;
            }
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mur Phase 1: createrectangle
show_debug_message("MUR PHASE 1 --------------------------------------------------");
Number = ini_read_real(global.selected_part,"RectangleNumber",0);
for(i=1;i&lt;=Number;i++){
    xx ="";
    yy ="";
    Asset="";
    SubAsset="";
    WSpace="";
    HSpace="";
    WNumber="";
    HNumber="";
    original = ini_read_string(global.selected_part,string(i)+"-createrectangle","(0,0,sample,2,36,36,0,0)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WSpace:
        if string_char_at(original,1) != ","{
            WSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("WSpace= "+WSpace);
            show_debug_message("original= "+original);
            WSpace = real(WSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HSpace:
        if string_char_at(original,1) != ","{
            HSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("HSpace= "+HSpace);
            show_debug_message("original= "+original);
            HSpace = real(HSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WNumber:
        if string_char_at(original,1) != ","{
            WNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("WNumber= "+WNumber);
            show_debug_message("original= "+original);
            WNumber = real(WNumber);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HNumber:
        if string_char_at(original,1) != ")"{
            HNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("HNumber= "+HNumber);
            show_debug_message("original= "+original);
            HNumber = real(HNumber);
            j = -10;
            }
        }
    //Switch de colonne
    for(k=1;k&lt;=HNumber;k++){
        //Faire des lignes:
        for(j=1;j&lt;=WNumber;j++){
            ThisWall = instance_create(xx,yy,object_wall);
            ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
            ThisWall.image_index = SubAsset;
            xx += WSpace;
            } 
        yy += HSpace;
        xx -= WSpace*WNumber; 
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mur Phase 2: createline
show_debug_message("MUR PHASE 2 -----------------------------------------------");
Number = ini_read_real(global.selected_part,"LineNumber",0);
for(i=1;i&lt;=Number;i++){
    xx ="";
    yy ="";
    Asset="";
    SubAsset="";
    WSpace="";
    WNumber="";
    original = ini_read_string(global.selected_part,string(i)+"-createline","(0,0,sample,2,36,0)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WSpace:
        if string_char_at(original,1) != ","{
            WSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("WSpace= "+WSpace);
            show_debug_message("original= "+original);
            WSpace = real(WSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WNumber:
        if string_char_at(original,1) != ")"{
            WNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("WNumber= "+WNumber);
            show_debug_message("original= "+original);
            WNumber = real(WNumber);
            j = -10;
            }
        }  
    //Faire des lignes:
    for(j=1;j&lt;=WNumber;j++){
        ThisWall = instance_create(xx,yy,object_wall);
        ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
        ThisWall.image_index = SubAsset;
        xx += WSpace;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mur Phase 3: createcolumn
show_debug_message("MUR PHASE 3 -----------------------------------------------------");
Number = ini_read_real(global.selected_part,"ColumnNumber",0);
for(i=1;i&lt;=Number;i++){
    xx ="";
    yy ="";
    Asset="";
    SubAsset="";
    HSpace="";
    HNumber="";
    original = ini_read_string(global.selected_part,string(i)+"-createcolumn","(0,0,sample,2,36,0)"); 
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HSpace:
        if string_char_at(original,1) != ","{
            HSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("HSpace= "+HSpace);
            show_debug_message("original= "+original);
            HSpace = real(HSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HNumber:
        if string_char_at(original,1) != ")"{
            HNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("HNumber= "+HNumber);
            show_debug_message("original= "+original);
            HNumber = real(HNumber);
            j = -10;
            }
        } 
    //Faire des lignes:
    for(j=1;j&lt;=HNumber;j++){
        ThisWall = instance_create(xx,yy,object_wall);
        ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
        ThisWall.image_index = SubAsset;
        yy += HSpace;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platforms Phase 1: Basic platform
show_debug_message("PLATEFORMES PHASE 1 ----------------------------------------------------");
Number = ini_read_real(global.selected_part,"BasicPlatformsNumber",0);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    original= ini_read_string(global.selected_part,string(i)+"-createbasicplatform","(0,0,sample,0)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ")"{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    This_platform = instance_create(xx,yy,object_platform);
    This_platform.image_index = SubAsset;
    This_platform.my_sprite = asset_get_index("sprite_"+Asset+"_platforms");
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platforms Phase 2: Horizontal Moving platform
show_debug_message("PLATRFORMES PHASE 2 ------------------------------------------------------");
Number = ini_read_real(global.selected_part,"HPlatformsNumber",0);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    distance = "";
    dir = "";
    movespeed = "";
    original= ini_read_string(global.selected_part,string(i)+"-createhplatform","(0,0,sample,0,0,1)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Distance:
        if string_char_at(original,1) != ","{
            distance += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("distance= "+distance);
            show_debug_message("original= "+original);
            distance = real(distance);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Direction:
        if string_char_at(original,1) != ","{
            dir += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("dir= "+dir);
            show_debug_message("original= "+original);
            dir = real(dir);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For movespeed:
        if string_char_at(original,1) != ")"{
            movespeed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("movespeed= "+movespeed);
            show_debug_message("original= "+original);
            movespeed = real(movespeed);
            j = -10;
            }
        }
    
        
        
        
    
    //On crée la plateforme:
    This_platform = instance_create(xx,yy,object_moving_platform);
    This_platform.image_index = SubAsset;
    This_platform.my_sprite = asset_get_index("sprite_"+Asset+"_platforms");
    This_platform.image_index = SubAsset;
    This_platform.dir = dir;
    This_platform.movespeed = movespeed;
    //Et on place les deux limites en fonction de son sprite.:
    instance_create(xx+distance+round(This_platform.sprite_width/2),yy,object_wall_platforms);
    instance_create(xx-distance-round(This_platform.sprite_width/2),yy,object_wall_platforms);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platforms Phase 3: uncontrol platform
show_debug_message("PLATEFORMES PHASE 3 ----------------------------------------------------");
Number = ini_read_real(global.selected_part,"UPlatformsNumber",0);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    original= ini_read_string(global.selected_part,string(i)+"-createuplatform","(0,0,sample,0)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ")"{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    This_platform = instance_create(xx,yy,object_uncontrol_platform);
    This_platform.image_index = SubAsset;
    This_platform.my_sprite = asset_get_index("sprite_"+Asset+"_platforms");
    This_platform.my_img_index = SubAsset;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platforms Phase 4: Vertical Moving platform
show_debug_message("PLATRFORMES PHASE 4 ------------------------------------------------------");
Number = ini_read_real(global.selected_part,"VPlatformsNumber",0);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    distance = "";
    dir = "";
    movespeed = "";
    original= ini_read_string(global.selected_part,string(i)+"-createvplatform","(0,0,sample,0,0,1)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Distance:
        if string_char_at(original,1) != ","{
            distance += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("distance= "+distance);
            show_debug_message("original= "+original);
            distance = real(distance);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Direction:
        if string_char_at(original,1) != ","{
            dir += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("dir= "+dir);
            show_debug_message("original= "+original);
            dir = real(dir);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For movespeed:
        if string_char_at(original,1) != ")"{
            movespeed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("movespeed= "+movespeed);
            show_debug_message("original= "+original);
            movespeed = real(movespeed);
            j = -10;
            }
        }
    
        
        
        
    
    
    This_platform = instance_create(xx,yy,object_vertical_platform);
    This_platform.image_index = SubAsset;
    This_platform.my_sprite = asset_get_index("sprite_"+Asset+"_platforms");
    This_platform.dir = dir;
    This_platform.movespeed = movespeed;
    //Et on place les deux limites:
    instance_create(xx,yy-distance,object_wall_platforms);
    instance_create(xx,yy+distance+This_platform.sprite_height,object_wall_platforms);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase Marchants (codée par la Juif Corp.):
show_debug_message("PHASE MARCHANTS -------------------------------------------------------");
Number = ini_read_real(global.selected_part,"SellersNumber",0);
for(i=1;i&lt;=Number;i++){
    //Reset des variables:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    case1a="";
    case1b="";
    case1c="";
    case2a="";
    case2b="";
    case2c="";
    case3a="";
    case3b="";
    case3c="";
    case1aprice="";
    case1bprice="";
    case1cprice="";
    case2aprice="";
    case2bprice="";
    case2cprice="";
    case3aprice="";
    case3bprice="";
    case3cprice="";
    case1apriceup="";
    case1bpriceup="";
    case1cpriceup="";
    case2apriceup="";
    case2bpriceup="";
    case2cpriceup="";
    case3apriceup="";
    case3bpriceup="";
    case3cpriceup="";
    //Récupération de la ligne de création:
    original = ini_read_string(global.selected_part,string(i)+"-createseller","(0,0,3,1,1,1,1,1,1,1,1,1,1,20,20,20,40,40,40,60,60,60,2,2,2,4,4,4,6,6,6)");
    original = string_replace(original,"(","");
    //Définition des variables:
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            Asset = real(Asset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    //Case part:
    for(j=1;j&gt;-1;j++){ //For case1a:
        if string_char_at(original,1) != ","{
            case1a += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case1a= "+case1a);
            show_debug_message("original= "+original);
            case1a = real(case1a);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case1b:
        if string_char_at(original,1) != ","{
            case1b += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case1b= "+case1b);
            show_debug_message("original= "+original);
            case1b = real(case1b);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case1c:
        if string_char_at(original,1) != ","{
            case1c += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case1c= "+case1c);
            show_debug_message("original= "+original);
            case1c = real(case1c);
            j = -10;
            }
        }
        
    for(j=1;j&gt;-1;j++){ //For case2a:
        if string_char_at(original,1) != ","{
            case2a += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case2a= "+case2a);
            show_debug_message("original= "+original);
            case2a = real(case2a);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case2b:
        if string_char_at(original,1) != ","{
            case2b += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case2b= "+case2b);
            show_debug_message("original= "+original);
            case2b = real(case2b);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case2c:
        if string_char_at(original,1) != ","{
            case2c += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case2c= "+case2c);
            show_debug_message("original= "+original);
            case2c = real(case2c);
            j = -10;
            }
        }
        
    for(j=1;j&gt;-1;j++){ //For case3a:
        if string_char_at(original,1) != ","{
            case3a += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case3a= "+case3a);
            show_debug_message("original= "+original);
            case3a = real(case3a);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case3b:
        if string_char_at(original,1) != ","{
            case3b += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case3b= "+case3b);
            show_debug_message("original= "+original);
            case3b = real(case3b);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case3c:
        if string_char_at(original,1) != ","{
            case3c += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case3c= "+case3c);
            show_debug_message("original= "+original);
            case3c = real(case3c);
            j = -10;
            }
        }    
    //Price part:
    for(j=1;j&gt;-1;j++){ //For case1aprice:
        if string_char_at(original,1) != ","{
            case1aprice += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case1aprice= "+case1aprice);
            show_debug_message("original= "+original);
            case1aprice = real(case1aprice);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case1bprice:
        if string_char_at(original,1) != ","{
            case1bprice += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case1bprice= "+case1bprice);
            show_debug_message("original= "+original);
            case1bprice = real(case1bprice);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case1cprice:
        if string_char_at(original,1) != ","{
            case1cprice += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case1cprice= "+case1cprice);
            show_debug_message("original= "+original);
            case1cprice = real(case1cprice);
            j = -10;
            }
        }
        
    for(j=1;j&gt;-1;j++){ //For case2aprice:
        if string_char_at(original,1) != ","{
            case2aprice += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case2aprice= "+case2aprice);
            show_debug_message("original= "+original);
            case2aprice = real(case2aprice);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case2bprice:
        if string_char_at(original,1) != ","{
            case2bprice += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case2bprice= "+case2bprice);
            show_debug_message("original= "+original);
            case2bprice = real(case2bprice);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case2cprice:
        if string_char_at(original,1) != ","{
            case2cprice += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case2cprice= "+case2cprice);
            show_debug_message("original= "+original);
            case2cprice = real(case2cprice);
            j = -10;
            }
        }
        
    for(j=1;j&gt;-1;j++){ //For case3aprice:
        if string_char_at(original,1) != ","{
            case3aprice += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case3aprice= "+case3aprice);
            show_debug_message("original= "+original);
            case3aprice = real(case3aprice);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case3bprice:
        if string_char_at(original,1) != ","{
            case3bprice += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case3bprice= "+case3bprice);
            show_debug_message("original= "+original);
            case3bprice = real(case3bprice);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case3cprice:
        if string_char_at(original,1) != ","{
            case3cprice += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case3cprice= "+case3cprice);
            show_debug_message("original= "+original);
            case3cprice = real(case3cprice);
            j = -10;
            }
        }
          
    //Priceup part:
    for(j=1;j&gt;-1;j++){ //For case1apriceup:
        if string_char_at(original,1) != ","{
            case1apriceup += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case1apriceup= "+case1apriceup);
            show_debug_message("original= "+original);
            case1apriceup = real(case1apriceup);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case1bpriceup:
        if string_char_at(original,1) != ","{
            case1bpriceup += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case1bpriceup= "+case1bpriceup);
            show_debug_message("original= "+original);
            case1bpriceup = real(case1bpriceup);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case1cpriceup:
        if string_char_at(original,1) != ","{
            case1cpriceup += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case1cpriceup= "+case1cpriceup);
            show_debug_message("original= "+original);
            case1cpriceup = real(case1cpriceup);
            j = -10;
            }
        }
        
    for(j=1;j&gt;-1;j++){ //For case2apriceup:
        if string_char_at(original,1) != ","{
            case2apriceup += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case2apriceup= "+case2apriceup);
            show_debug_message("original= "+original);
            case2apriceup = real(case2apriceup);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case2bpriceup:
        if string_char_at(original,1) != ","{
            case2bpriceup += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case2bpriceup= "+case2bpriceup);
            show_debug_message("original= "+original);
            case2bpriceup = real(case2bpriceup);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case2cpriceup:
        if string_char_at(original,1) != ","{
            case2cpriceup += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case2cpriceup= "+case2cpriceup);
            show_debug_message("original= "+original);
            case2cpriceup = real(case2cpriceup);
            j = -10;
            }
        }
        
    for(j=1;j&gt;-1;j++){ //For case3apriceup:
        if string_char_at(original,1) != ","{
            case3apriceup += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case3apriceup= "+case3apriceup);
            show_debug_message("original= "+original);
            case3apriceup = real(case3apriceup);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case3bpriceup:
        if string_char_at(original,1) != ","{
            case3bpriceup += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("case3bpriceup= "+case3bpriceup);
            show_debug_message("original= "+original);
            case3bpriceup = real(case3bpriceup);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For case3cpriceup:
        if string_char_at(original,1) != ")"{
            case3cpriceup += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("case3cpriceup= "+case3cpriceup);
            show_debug_message("original= "+original);
            case3cpriceup = real(case3cpriceup);
            j = -10;
            }
        }
        
    This_seller = instance_create(xx,yy,object_seller);
    This_seller.image_index = Asset;
    This_seller.vendor_index = SubAsset;
    temp_cas = irandom(2);
    //Injection case 1:
    if temp_cas = 0{
        This_seller.case1 = case1a;
        This_seller.case1price = case1aprice;
        This_seller.case1priceup = case1apriceup;
        }
    else{
        if temp_cas = 1{
            This_seller.case1 = case1b;
            This_seller.case1price = case1bprice;
            This_seller.case1priceup = case1bpriceup;
            }
        else{
            if temp_cas = 2{
                This_seller.case1 = case1c;
                This_seller.case1price = case1cprice;
                This_seller.case1priceup = case1cpriceup; 
                }
            }
        }
    temp_cas = irandom(2);
    //Injection case 2:
    if temp_cas = 0{
        This_seller.case2 = case2a;
        This_seller.case2price = case2aprice;
        This_seller.case2priceup = case2apriceup;
        }
    else{
        if temp_cas = 1{
            This_seller.case2 = case2b;
            This_seller.case2price = case2bprice;
            This_seller.case2priceup = case2bpriceup;
            }
        else{
            if temp_cas = 2{
                This_seller.case2 = case2c;
                This_seller.case2price = case2cprice;
                This_seller.case2priceup = case2cpriceup; 
                }
            }
        }
    temp_cas = irandom(2);            
    //Injection case 3:
    if temp_cas = 0{
        This_seller.case3 = case3a;
        This_seller.case3price = case3aprice;
        This_seller.case3priceup = case3apriceup;
        }
    else{
        if temp_cas = 1{
            This_seller.case3 = case3b;
            This_seller.case3price = case3bprice;
            This_seller.case3priceup = case3bpriceup;
            }
        else{
            if temp_cas = 2{
                This_seller.case3 = case3c;
                This_seller.case3price = case3cprice;
                This_seller.case3priceup = case3cpriceup; 
                }
            }
        }   
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase joueur: !IAHSMAI
show_debug_message("JE CONVOQUE SHAI !--------------------------------------------");
Number = ini_read_real(global.selected_part,"ShaiNumber",0);
show_debug_message("ShaiNumber= "+string(Number));
show_debug_message("global.selected_part= "+global.selected_part);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    original = ini_read_string(global.selected_part,string(i)+"-createshai","(0,0)"); 
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ")"{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    instance_create(xx,yy,object_player);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase drawing:
instance_create(x+sprite_width,y,object_drawer);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase fermeture du fichier:
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
