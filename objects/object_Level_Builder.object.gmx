<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_level_builder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Level Builder V4</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialisation de l'environnement:
//Var réutilisées: global.SELECTED_SAVE,global.selected_level,global.selected_part.

//Purification des logs précédents:
file_delete(working_directory+"logs/last_logs.txt");
file_delete(working_directory+"logs/last_errors.txt");
file_delete(working_directory+"logs/last_warnings_and_errors.txt");

print_debug("[LB] ----------INITIALISATION DE L'ENVIRONNEMENT----------");

//Ouverture du fichier de niveau correspondant:
ini_open(global.selected_level);

//Phase d'initialisation de l'environnement:
room_width = ini_read_real(global.selected_part,"XSize",424);
room_height = ini_read_real(global.selected_part,"YSize",240);

//Inscription des nouveaux fonds dans les settings:
SettingsBackground[0]=ini_read_string("Generic Informations","MainMenuBackground","");
SettingsBackground[1]=ini_read_string("Generic Informations","addSpriteMainMenuBackground","");
ini_close();

ini_open(working_directory+"settings/settings.ini");
ini_write_string("others","TitleScreenBackground",SettingsBackground[0]);
ini_write_string("others","BackgroundSprite",SettingsBackground[1]);
ini_close();

ini_open(global.selected_level);

//Récupération des paramètres de monde.
original=ini_read_string(global.selected_part,"Worldsettings","(0.3,6,8,0.12,6000,0)");
check_integrity(id,"original",6);

//Déclaration des variables utilisés:
global.grav="";
global.jumpspeed="";
global.movespeed="";
global.frict="";
global.time_left="";
global.bossfight="";

if integrity{
    //Récupération des valeurs dans des variables temporaires:
    grav=extract_real(id,"original");
    jumpspeed=extract_real(id,"original");
    movespeed=extract_real(id,"original");
    frict=extract_real(id,"original");
    time_left=extract_real(id,"original");
    bossfight=extract_real(id,"original");
    
    if integrity{
        //Affectation des valeurs
        global.grav=grav;
        global.jumpspeed=jumpspeed;
        global.movespeed=movespeed;
        global.frict=frict;
        global.time_left=time_left;
        global.bossfight=bossfight;
        }
    else{
        print_error("[LB] Arguments are wrong")
        print_warning("[LB] Skipping World settings");
        }
    }
else{
    print_warning("[LB] Skipping World settings definition");
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>----------MODE EXPERT----------</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------MUR TOUT SEUL----------
print_debug("--------MUR TOUT SEUL----------");

//Récupération:
Number= ini_read_real(global.selected_part,"WallsNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEWALL-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createwall","");
    check_integrity(id,"original",4);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=extract_string(id,"original");
        SubAsset=extract_constant(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_wall=instance_create(xx,yy,object_wall);
            This_wall.sprite_index=asset_get("sprite_"+Asset+"_walls");
            This_wall.image_index=SubAsset;
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createwall function");
            print_warning("[LB] Skipping the " +string(i)+"-createwall function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createwall function");
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------MUR EN LIGNE----------
print_debug("--------MUR EN LIGNE----------");

//Récupération:
Number= ini_read_real(global.selected_part,"LinesNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATELINE-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    WSpace="";
    Length="";
    
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createline","");
    check_integrity(id,"original",5);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=asset_get("sprite_"+extract_string(id,"original")+"_walls");
        SubAsset=extract_constant(id,"original");
        WSpace=sprite_get_width(Asset);
        Length=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            for(j=0;j&lt;Length;j++){
                This_wall=instance_create(xx+j*WSpace,yy,object_wall);
                This_wall.sprite_index=Asset;
                This_wall.image_index=SubAsset;
                }
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createline function");
            print_warning("[LB] Skipping the " +string(i)+"-createline function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createline function");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------MUR EN COLONNE----------
print_debug("--------MUR EN COLONNE----------");

//Récupération:
Number= ini_read_real(global.selected_part,"ColumnsNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATECOLUMN-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    HSpace="";
    Length="";
    
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createcolumn","");
    check_integrity(id,"original",5);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=asset_get("sprite_"+extract_string(id,"original")+"_walls");
        SubAsset=extract_constant(id,"original");
        HSpace=sprite_get_height(Asset);
        Length=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            for(j=0;j&lt;Length;j++){
                This_wall=instance_create(xx,yy+j*WSpace,object_wall);
                This_wall.sprite_index=Asset;
                This_wall.image_index=SubAsset;
                }
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createcolumn function");
            print_warning("[LB] Skipping the " +string(i)+"-createcolumn function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createcolumn function");
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------MUR EN RECTANGLE----------
print_debug("--------MUR EN RECTANGLE----------");

//Récupération:
Number= ini_read_real(global.selected_part,"RectanglesNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATERECTANGLE-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    WSpace="";
    WLength="";
    HSpace="";
    HLength="";
    
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createrectangle","");
    check_integrity(id,"original",6);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=asset_get("sprite_"+extract_string(id,"original")+"_walls");
        SubAsset=extract_constant(id,"original");
        WSpace=sprite_get_width(Asset);
        WLength=extract_real(id,"original");
        HSpace=sprite_get_height(Asset);
        HLength=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            for(j=0;j&lt;HLength;j++){
                for(k=0;k&lt;WLength;k++){
                    This_wall=instance_create(xx+k*WSpace,yy+j*HSpace,object_wall);
                    This_wall.sprite_index=Asset;
                    This_wall.image_index=SubAsset;
                    }
                }
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createrectangle function");
            print_warning("[LB] Skipping the " +string(i)+"-createrectangle function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createrectangle function");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------FAUX MUR TOUT SEUL----------
print_debug("--------FAUX MUR TOUT SEUL----------");

//Récupération:
Number= ini_read_real(global.selected_part,"FakeWallsNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEFAKEWALL-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createfakewall","");
    check_integrity(id,"original",4);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=extract_string(id,"original");
        SubAsset=extract_constant(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_wall=instance_create(xx,yy,object_fake_wall);
            This_wall.sprite_index=asset_get("sprite_"+Asset+"_walls");
            This_wall.image_index=SubAsset;
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createfakewall function");
            print_warning("[LB] Skipping the " +string(i)+"-createfakewall function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createfakewall function");
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------FAUX MUR EN LIGNE----------
print_debug("--------FAUX MUR EN LIGNE----------");

//Récupération:
Number= ini_read_real(global.selected_part,"FakeLinesNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEFAKELINE-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    WSpace="";
    Length="";
    
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createfakeline","");
    check_integrity(id,"original", 5);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=asset_get("sprite_"+extract_string(id,"original")+"_walls");
        SubAsset=extract_constant(id,"original");
        WSpace=sprite_get_width(Asset);
        Length=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            for(j=0;j&lt;Length;j++){
                This_wall=instance_create(xx+j*WSpace,yy,object_fake_wall);
                This_wall.sprite_index=Asset;
                This_wall.image_index=SubAsset;
                }
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createfakeline function");
            print_warning("[LB] Skipping the " +string(i)+"-createfakeline function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createfakeline function");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------FAUX MUR EN COLONNE----------
print_debug("--------FAUX MUR EN COLONNE----------");

//Récupération:
Number= ini_read_real(global.selected_part,"FakeColumnsNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEFAKECOLUMN-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    HSpace="";
    Length="";
    
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createfakecolumn","");
    check_integrity(id,"original",5);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=asset_get("sprite_"+extract_string(id,"original")+"_walls");
        SubAsset=extract_constant(id,"original");
        HSpace=sprite_get_height(Asset);
        Length=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            for(j=0;j&lt;Length;j++){
                This_wall=instance_create(xx,yy+j*WSpace,object_fake_wall);
                This_wall.sprite_index=Asset;
                This_wall.image_index=SubAsset;
                }
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createfakecolumn function");
            print_warning("[LB] Skipping the " +string(i)+"-createfakecolumn function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createfakecolumn function");
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------FAUX MUR EN RECTANGLE----------
print_debug("--------FAUX MUR EN RECTANGLE----------");

//Récupération:
Number= ini_read_real(global.selected_part,"FakeRectanglesNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEFAKERECTANGLE-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    WSpace="";
    WLength="";
    HSpace="";
    HLength="";
    
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createfakerectangle","");
    check_integrity(id,"original",6);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=asset_get("sprite_"+extract_string(id,"original")+"_walls");
        SubAsset=extract_constant(id,"original");
        WSpace=sprite_get_width(Asset);
        WLength=extract_real(id,"original");
        HSpace=sprite_get_height(Asset);
        HLength=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            for(j=0;j&lt;HLength;j++){
                for(k=0;k&lt;WLength;k++){
                    This_wall=instance_create(xx+k*WSpace,yy+j*HSpace,object_fake_wall);
                    This_wall.sprite_index=Asset;
                    This_wall.image_index=SubAsset;
                    }
                }
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createfakerectangle function");
            print_warning("[LB] Skipping the " +string(i)+"-createfakerectangle function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createfakerectangle function");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------SIMPLE PLATEFORME----------
print_debug("--------SIMPLE PLATEFORME----------");

//Récupération:
Number= ini_read_real(global.selected_part,"SPlatformsNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATESPLATFORM-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createsplatform","");
    check_integrity(id,"original",4);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=extract_string(id,"original");
        SubAsset=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_platform=instance_create(xx,yy,object_simple_platform);
            This_platform.spr_index=asset_get("sprite_"+Asset+"_platforms");
            This_platform.image_index=SubAsset;
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createsplatform function");
            print_warning("[LB] Skipping the " +string(i)+"-createsplatform function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createsplatform function");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------PLATEFORME HORIZONTALE----------
print_debug("--------PLATEFORME HORIZONTALE----------");

//Récupération:
Number= ini_read_real(global.selected_part,"HPlatformsNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEHPLATFORM-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    distance="";
    spd="";
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createhplatform","");
    check_integrity(id,"original",6);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=extract_string(id,"original");
        SubAsset=extract_real(id,"original");
        distance=extract_real(id,"original");
        spd=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_platform=instance_create(xx,yy,object_horizontal_platform);
            This_platform.spr_index=asset_get("sprite_"+Asset+"_platforms");
            This_platform.image_index=SubAsset;
            This_platform.distance=distance;
            This_platform.hsp=spd;
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createhplatform function");
            print_warning("[LB] Skipping the " +string(i)+"-createhplatform function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createhplatform function");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------PLATEFORME VERTICALE----------
print_debug("--------PLATEFORME VERTICALE----------");

//Récupération:
Number= ini_read_real(global.selected_part,"VPlatformsNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEVPLATFORM-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    distance="";
    spd="";
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createvplatform","");
    check_integrity(id,"original",6);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=extract_string(id,"original");
        SubAsset=extract_real(id,"original");
        distance=extract_real(id,"original");
        spd=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_platform=instance_create(xx,yy,object_vertical_platform);
            This_platform.spr_index=asset_get("sprite_"+Asset+"_platforms");
            This_platform.image_index=SubAsset;
            This_platform.distance=distance;
            This_platform.vsp=spd;
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createvplatform function");
            print_warning("[LB] Skipping the " +string(i)+"-createvplatform function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createvplatform function");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------PLATEFORME INCONTROLABLE----------
print_debug("--------PLATEFORME INCONTROLABLE----------");

//Récupération:
Number= ini_read_real(global.selected_part,"UPlatformsNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEUPLATFORM-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createuplatform","");
    check_integrity(id,"original",4);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=extract_string(id,"original");
        SubAsset=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_platform=instance_create(xx,yy,object_uncontrol_platform);
            This_platform.spr_index=asset_get("sprite_"+Asset+"_platforms");
            This_platform.image_index=SubAsset;
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createuplatform function");
            print_warning("[LB] Skipping the " +string(i)+"-createuplatform function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createuplatform function");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------OBJET POUSSABLE----------
print_debug("--------OBJET POUSSABLE----------");

//Récupération:
Number= ini_read_real(global.selected_part,"PushablesNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEPUSHABLE-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    pushspeed="";
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createpushable","");
    check_integrity(id,"original",5);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        Asset=extract_string(id,"original");
        SubAsset=extract_real(id,"original");
        pushspeed=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_pushable=instance_create(xx,yy,object_pushable);
            This_pushable.sprite_index=asset_get("sprite_"+Asset+"_platforms");
            This_pushable.image_index=SubAsset;
            This_pushable.pushspeed=pushspeed;
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createpushable function");
            print_warning("[LB] Skipping the " +string(i)+"-createpushable function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createpushable function");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------OISEAU SUNSET FOREST----------
print_debug("--------OISEAU SUNSET FOREST----------");

//Récupération:
Number= ini_read_real(global.selected_part,"BirdsNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEBIRD-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    destination=""; 
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createbird","");
    check_integrity(id,"original",3);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        destination=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_bird=instance_create(xx,yy,object_bird);
            This_bird.image_xscale=sign(destination)
            This_bird.destination= round(view_wview[0]/irandom_range(180,300))*destination;
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createbird function");
            print_warning("[LB] Skipping the " +string(i)+"-createbird function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createbird function");
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------SHAI----------
print_debug("--------SHAI----------");

//Récupération:
Number= ini_read_real(global.selected_part,"ShaiNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATESHAI-----");
    
    //Variables utilisées:
    xx="";
    yy="";
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createshai","");
    check_integrity(id,"original",2);
    
    if integrity{//si le string à l'air bon:
        xx=extract_real(id,"original");
        yy=extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_shai=instance_create(xx,yy,object_player);
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createshai function");
            print_warning("[LB] Skipping the " +string(i)+"-createshai function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createshai function");
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------FOX SUNSET FOREST----------
print_debug("--------FOX SUNSET FOREST----------");

//Récupération:
Number = ini_read_real(global.selected_part,"FoxNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEFOX-----");
    
    //Variables utilisées:
    xx = "";
    yy = "";  
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createfox","");
    check_integrity(id,"original",2);
    
    if integrity{//si le string à l'air bon:
        xx = extract_real(id,"original");
        yy = extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_fox = instance_create(xx,yy,object_pet_fox);                                 
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createfox function");
            print_warning("[LB] Skipping the " +string(i)+"-createfox function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createfox function");
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------PANDA SUNSET FOREST----------
print_debug("--------PANDA SUNSET FOREST----------");

//Récupération:
Number = ini_read_real(global.selected_part,"PandaNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEPANDA-----");
    
    //Variables utilisées:
    xx = "";
    yy = "";  
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createpanda","");
    check_integrity(id,"original",2);
    
    if integrity{//si le string à l'air bon:
        xx = extract_real(id,"original");
        yy = extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_panda = instance_create(xx,yy,object_pet_panda);                                 
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createpanda function");
            print_warning("[LB] Skipping the " +string(i)+"-createpanda function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createpanda function");
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------PIG SUNSET FOREST----------
print_debug("--------PIG SUNSET FOREST----------");

//Récupération:
Number = ini_read_real(global.selected_part,"PigNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATEPIG-----");
    
    //Variables utilisées:
    xx = "";
    yy = "";  
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createpig","");
    check_integrity(id,"original",2);
    
    if integrity{//si le string à l'air bon:
        xx = extract_real(id,"original");
        yy = extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_pig = instance_create(xx,yy,object_pet_pig);                                 
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createpig function");
            print_warning("[LB] Skipping the " +string(i)+"-createpig function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createpig function");
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--------CAT SUNSET FOREST----------
print_debug("--------CAT SUNSET FOREST----------");

//Récupération:
Number = ini_read_real(global.selected_part,"CatNumber",0);
print_debug("[LB] Number Found: "+string(Number));
for(i=1;i&lt;=Number;i++){//Pour le nombre
    print_debug("-----"+string(i)+"-CREATECAT-----");
    
    //Variables utilisées:
    xx = "";
    yy = "";  
    
    //Récupération:
    original=ini_read_string(global.selected_part,string(i)+"-createcat","");
    check_integrity(id,"original",2);
    
    if integrity{//si le string à l'air bon:
        xx = extract_real(id,"original");
        yy = extract_real(id,"original");
        
        if integrity{//Si les arguments sont bons:
            This_cat = instance_create(xx,yy,object_pet_cat);                                 
            }
        else{
            print_error("[LB] Wrong arguments for the "+string(i)+"-createcat function");
            print_warning("[LB] Skipping the " +string(i)+"-createcat function");
            }
        }
    else{
        print_warning("[LB] Skipping the " +string(i)+"-createcat function");
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///----------COPY LOGS----------
print_debug("----------COPY LOGS----------");
print_debug("[LOGS] saved "+"logs_"+string(current_year)+"_"+string(current_month)+"_"+string(current_day)+"_"+string(current_hour)+"_"+string(current_minute)+"_"+string(current_second)+".txt into /archives directory");
file_copy(working_directory+"logs/last_logs.txt",working_directory+"logs/archives/logs_"+string(current_year)+"_"+string(current_month)+"_"+string(current_day)+"_"+string(current_hour)+"_"+string(current_minute)+"_"+string(current_second)+".txt");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
