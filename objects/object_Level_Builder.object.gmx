<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_level_builder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Constructeur de niveau V-3.1 (Docs non incluse)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialisation de l'environnement
//Var réutilisées: global.SELECTED_SAVE,global.selected_level,global.selected_part.
show_debug_message("INITIALISATION DE L'ENVIRONNEMENT--------------------------------------------");

//Ouverture du fichier de niveau correspondant:
ini_open(global.selected_level);


//Phase d'initialisation de l'environnement:
room_width = ini_read_real("Generic Informations",global.selected_part+"XSize",424);
room_height = ini_read_real("Generic Informations",global.selected_part+"YSize",240);

//Déclarations des variables locales:
var xx;
var yy;
var Asset;
var SubAssets;
var WSpace;
var HSpace;
var WNumber;
var HNumber;
var Number;
var original;
//Variables locales utilisées par les plateformes:
var distance;
var dir;
var movespeed;
//Variables utilisés par le système de background/foregrounds
var Depth;
var Xaxis;
var Yaxis;
var Speed;
var Xoffset;
var Yoffset;
var htiled;
var vtiled;


//Déclaration des variables globales utilisées principalement par le joueur:
global.grav="";
global.jumpspeed="";
global.movespeed="";
global.frict="";
global.time_left="";
global.bossfight="";

//Définition des variables globales utilisées principalement par le joueur:
original = ini_read_string(global.selected_part,"Worldsettings","(0.3,6,8,0.12,6000,0)");
original = string_replace(original,"(","");
for(j=1;j&gt;-1;j++){ //For gravity:
        if string_char_at(original,1) != ","{
            global.grav += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.grav= "+global.grav);
            show_debug_message("original= "+original);
            global.grav = real(global.grav);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For jumpspeed:
        if string_char_at(original,1) != ","{
            global.jumpspeed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.jumpspeed= "+global.jumpspeed);
            show_debug_message("original= "+original);
            global.jumpspeed = real(global.jumpspeed);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For movespeed:
        if string_char_at(original,1) != ","{
            global.movespeed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.movespeed= "+global.movespeed);
            show_debug_message("original= "+original);
            global.movespeed = real(global.movespeed);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For friction:
        if string_char_at(original,1) != ","{
            global.frict += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.frict= "+global.frict);
            show_debug_message("original= "+original);
            global.frict = real(global.frict);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For time in seconds:
        if string_char_at(original,1) != ","{
            global.time_left += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.time_left= "+global.time_left);
            show_debug_message("original= "+original);
            global.time_left = real(global.time_left);
            j = -10;
            }
        }
for(j=1;j&gt;-1;j++){ //For bossfight ?:
        if string_char_at(original,1) != ")"{
            global.bossfight += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("global.bossfight= "+global.bossfight);
            show_debug_message("original= "+original);
            global.bossfight = real(global.bossfight);
            j = -10;
            }
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mur Phase 1: createrectangle
show_debug_message("MUR PHASE 1 --------------------------------------------------");
Number = ini_read_real(global.selected_part,"RectangleNumber",0);
for(i=1;i&lt;=Number;i++){
    xx ="";
    yy ="";
    Asset="";
    SubAsset="";
    WSpace="";
    HSpace="";
    WNumber="";
    HNumber="";
    original = ini_read_string(global.selected_part,string(i)+"-createrectangle","(0,0,sample,2,36,36,0,0)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WSpace:
        if string_char_at(original,1) != ","{
            WSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("WSpace= "+WSpace);
            show_debug_message("original= "+original);
            WSpace = real(WSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HSpace:
        if string_char_at(original,1) != ","{
            HSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("HSpace= "+HSpace);
            show_debug_message("original= "+original);
            HSpace = real(HSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WNumber:
        if string_char_at(original,1) != ","{
            WNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("WNumber= "+WNumber);
            show_debug_message("original= "+original);
            WNumber = real(WNumber);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HNumber:
        if string_char_at(original,1) != ")"{
            HNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("HNumber= "+HNumber);
            show_debug_message("original= "+original);
            HNumber = real(HNumber);
            j = -10;
            }
        }
    //Switch de colonne
    for(k=1;k&lt;=HNumber;k++){
        //Faire des lignes:
        for(j=1;j&lt;=WNumber;j++){
            ThisWall = instance_create(xx,yy,object_wall);
            ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
            ThisWall.image_index = SubAsset;
            xx += WSpace;
            } 
        yy += HSpace;
        xx -= WSpace*WNumber; 
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mur Phase 2: createline
show_debug_message("MUR PHASE 2 -----------------------------------------------");
Number = ini_read_real(global.selected_part,"LineNumber",0);
for(i=1;i&lt;=Number;i++){
    xx ="";
    yy ="";
    Asset="";
    SubAsset="";
    WSpace="";
    WNumber="";
    original = ini_read_string(global.selected_part,string(i)+"-createline","(0,0,sample,2,36,0)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WSpace:
        if string_char_at(original,1) != ","{
            WSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("WSpace= "+WSpace);
            show_debug_message("original= "+original);
            WSpace = real(WSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For WNumber:
        if string_char_at(original,1) != ")"{
            WNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("WNumber= "+WNumber);
            show_debug_message("original= "+original);
            WNumber = real(WNumber);
            j = -10;
            }
        }  
    //Faire des lignes:
    for(j=1;j&lt;=WNumber;j++){
        ThisWall = instance_create(xx,yy,object_wall);
        ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
        ThisWall.image_index = SubAsset;
        xx += WSpace;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mur Phase 3: createcolumn
show_debug_message("MUR PHASE 3 -----------------------------------------------------");
Number = ini_read_real(global.selected_part,"ColumnNumber",0);
for(i=1;i&lt;=Number;i++){
    xx ="";
    yy ="";
    Asset="";
    SubAsset="";
    HSpace="";
    HNumber="";
    original = ini_read_string(global.selected_part,string(i)+"-createcolumn","(0,0,sample,2,36,0)"); 
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HSpace:
        if string_char_at(original,1) != ","{
            HSpace += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("HSpace= "+HSpace);
            show_debug_message("original= "+original);
            HSpace = real(HSpace);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For HNumber:
        if string_char_at(original,1) != ")"{
            HNumber += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("HNumber= "+HNumber);
            show_debug_message("original= "+original);
            HNumber = real(HNumber);
            j = -10;
            }
        } 
    //Faire des lignes:
    for(j=1;j&lt;=HNumber;j++){
        ThisWall = instance_create(xx,yy,object_wall);
        ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
        ThisWall.image_index = SubAsset;
        yy += HSpace;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mur Phase 4: createwall
show_debug_message("MUR PHASE 4 -----------------------------------------------------");
Number = ini_read_real(global.selected_part,"WallNumber",0);
for(i=1;i&lt;=Number;i++){
    xx ="";
    yy ="";
    Asset="";
    SubAsset="";
    original = ini_read_string(global.selected_part,string(i)+"-createwall","(0,0,sample,2)"); 
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ")"{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    
    //Faire apparaître le mur.
    ThisWall = instance_create(xx,yy,object_wall);
    ThisWall.sprite_index = asset_get_index("sprite_"+Asset+"_walls");
    ThisWall.image_index = SubAsset;
        
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platforms Phase 1: Basic platform
show_debug_message("PLATEFORMES PHASE 1 ----------------------------------------------------");
Number = ini_read_real(global.selected_part,"BasicPlatformsNumber",0);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    original= ini_read_string(global.selected_part,string(i)+"-createbasicplatform","(0,0,sample,0)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ")"{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    This_platform = instance_create(xx,yy,object_platform);
    This_platform.image_index = SubAsset;
    This_platform.my_sprite = asset_get_index("sprite_"+Asset+"_platforms");
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platforms Phase 2: Horizontal Moving platform
show_debug_message("PLATRFORMES PHASE 2 ------------------------------------------------------");
Number = ini_read_real(global.selected_part,"HPlatformsNumber",0);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    distance = "";
    dir = "";
    movespeed = "";
    original= ini_read_string(global.selected_part,string(i)+"-createhplatform","(0,0,sample,0,0,1)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Distance:
        if string_char_at(original,1) != ","{
            distance += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("distance= "+distance);
            show_debug_message("original= "+original);
            distance = real(distance);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Direction:
        if string_char_at(original,1) != ","{
            dir += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("dir= "+dir);
            show_debug_message("original= "+original);
            dir = real(dir);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For movespeed:
        if string_char_at(original,1) != ")"{
            movespeed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("movespeed= "+movespeed);
            show_debug_message("original= "+original);
            movespeed = real(movespeed);
            j = -10;
            }
        }
    
        
        
        
    
    //On crée la plateforme:
    This_platform = instance_create(xx,yy,object_moving_platform);
    This_platform.image_index = SubAsset;
    This_platform.my_sprite = asset_get_index("sprite_"+Asset+"_platforms");
    This_platform.image_index = SubAsset;
    This_platform.dir = dir;
    This_platform.movespeed = movespeed;
    //Et on place les deux limites en fonction de son sprite.:
    instance_create(xx+distance+round(This_platform.sprite_width/2),yy,object_wall_platforms);
    instance_create(xx-distance-round(This_platform.sprite_width/2),yy,object_wall_platforms);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platforms Phase 3: uncontrol platform
show_debug_message("PLATEFORMES PHASE 3 ----------------------------------------------------");
Number = ini_read_real(global.selected_part,"UPlatformsNumber",0);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    original= ini_read_string(global.selected_part,string(i)+"-createuplatform","(0,0,sample,0)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ")"{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    This_platform = instance_create(xx,yy,object_uncontrol_platform);
    This_platform.image_index = SubAsset;
    This_platform.my_sprite = asset_get_index("sprite_"+Asset+"_platforms");
    This_platform.my_img_index = SubAsset;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platforms Phase 4: Vertical Moving platform
show_debug_message("PLATRFORMES PHASE 4 ------------------------------------------------------");
Number = ini_read_real(global.selected_part,"VPlatformsNumber",0);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    distance = "";
    dir = "";
    movespeed = "";
    original= ini_read_string(global.selected_part,string(i)+"-createvplatform","(0,0,sample,0,0,1)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Distance:
        if string_char_at(original,1) != ","{
            distance += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("distance= "+distance);
            show_debug_message("original= "+original);
            distance = real(distance);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Direction:
        if string_char_at(original,1) != ","{
            dir += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("dir= "+dir);
            show_debug_message("original= "+original);
            dir = real(dir);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For movespeed:
        if string_char_at(original,1) != ")"{
            movespeed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("movespeed= "+movespeed);
            show_debug_message("original= "+original);
            movespeed = real(movespeed);
            j = -10;
            }
        }
    
        
        
        
    
    
    This_platform = instance_create(xx,yy,object_vertical_platform);
    This_platform.image_index = SubAsset;
    This_platform.my_sprite = asset_get_index("sprite_"+Asset+"_platforms");
    This_platform.dir = dir;
    This_platform.movespeed = movespeed;
    //Et on place les deux limites:
    instance_create(xx,yy-distance,object_wall_platforms);
    instance_create(xx,yy+distance+This_platform.sprite_height,object_wall_platforms);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase Marchants (codée par la Juif Corp.):
show_debug_message("PHASE MARCHANTS -------------------------------------------------------");
Number = ini_read_real(global.selected_part,"SellersNumber",0);
for(i=1;i&lt;=Number;i++){
    //Reset des variables:
    xx="";
    yy="";
    Asset="";
    SubAsset="";
    //Génération des tableaux des cas d'item (chaque item possède trois cas, ainsi que leur prix et leur multiplcateur de prix)
    //La première dimension correspond au numéro de l'item et la seconde au cas a/b/c
    for(i=0;i&lt;=2;i++){
        for(j=0;j&lt;=2;j++){
            item_case[i,j]="";
            price_case[i,j]="";
            price_up_case[i,j]="";
            
            
        }
    }
    //Récupération de la ligne de création:
    original = ini_read_string(global.selected_part,string(i)+"-createseller","(250,370,3,2,1,1,1,20,20,20,2,2,2,3,3,3,40,40,40,1.5,1.5,1.5,6,6,6,70,70,70,3,3,3)");
    original = string_replace(original,"(","");
    //Définition des variables:
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ","{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            Asset = real(Asset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For SubAsset:
        if string_char_at(original,1) != ","{
            SubAsset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("SubAsset= "+SubAsset);
            show_debug_message("original= "+original);
            SubAsset = real(SubAsset);
            j = -10;
            }
        }
    //Case part:
    //Reworked:
    //Pour chaque numéro d'item puis pour chaque cas:
    show_debug_message("BONJOUUUUUUUUUUUUUUUUUUUUUUUUR !");
    for(i=0;i&lt;=2;i++){
        for(j=0;j&lt;=2;j++){
            //Le numéro des trois items dans les cas a/b/c
            for(k=0;k&gt; -1;k++){
                if string_char_at(original,1) != ","{
                    item_case[i,j] += string_copy(original,1,1);
                    original = string_replace(original,string_char_at(original,1),"");
                    }
                else{
                    original = string_replace(original,",","");
                    show_debug_message('item_case['+string(i)+','+string(j)+']= '+item_case[i,j]);
                    show_debug_message("original= "+original);
                    item_case[i,j]=real(item_case[i,j]);
                    k= -10;
                    }
                }
            }
            
            for(j=0;j&lt;=2;j++){
                //Le prix des trois items dans les cas a/b/c
                for(k=0;k &gt; -1;k++){
                    if string_char_at(original,1) != "," {
                        price_case[i,j] += string_copy(original,1,1);
                        original = string_replace(original,string_char_at(original,1),"");
                        }
                    else{
                        original = string_replace(original,",","");
                        show_debug_message('price_case['+string(i)+','+string(j)+']= '+price_case[i,j]);
                        show_debug_message("original= "+original);
                        price_case[i,j]=real(price_case[i,j]);
                        k= -10;
                        }
                    }
                }
            
            for(j=0;j&lt;=2;j++){
                //Le multiplicateur de prix des trois items dans les cas a/b/c
                for(k=0;k&gt;-1;k++){
                    if string_char_at(original,1) !="," &amp;&amp; string_char_at(original,1) != ")" {
                        price_up_case[i,j] += string_copy(original,1,1);
                        original = string_replace(original,string_char_at(original,1),"");
                        }
                    else{
                        original = string_replace(original,string_char_at(original,1),"");
                        //Enlève sans vérifier , ou )
                        show_debug_message('price_up_case['+string(i)+','+string(j)+']= '+price_up_case[i,j]);
                        show_debug_message("original= "+original);
                        price_up_case[i,j]=real(price_up_case[i,j]);
                        k= -10;
                        }
                    } 
                }
            }
     
    
        //Reworked:
        This_seller = instance_create(xx,yy,object_seller);
        This_seller.image_index = Asset;
        This_seller.vendor_index = SubAsset;
        Temp=irandom(2); //Sert à partager entre la cas a/b/c
        
        //Injection des valeurs choisies #BOTTOX
        for (i=0;i&lt;=2;i++){
            This_seller.item_case[i]=item_case[i,Temp];
            This_seller.price_case[i]=price_case[i,Temp];
            This_seller.price_up_case[i]=price_up_case[i,Temp];
            }
                
        }
     

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase joueur: !IAHSMAI
show_debug_message("JE CONVOQUE SHAI !--------------------------------------------");
Number = ini_read_real(global.selected_part,"ShaiNumber",0);
show_debug_message("ShaiNumber= "+string(Number));
show_debug_message("global.selected_part= "+global.selected_part);
for(i=1;i&lt;=Number;i++){
    xx="";
    yy="";
    original = ini_read_string(global.selected_part,string(i)+"-createshai","(0,0)"); 
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For xx:
        if string_char_at(original,1) != ","{
            xx += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("xx= "+xx);
            show_debug_message("original= "+original);
            xx = real(xx);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For yy:
        if string_char_at(original,1) != ")"{
            yy += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("yy= "+yy);
            show_debug_message("original= "+original);
            yy = real(yy);
            j = -10;
            }
        }
    instance_create(xx,yy,object_player);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase backgrounds et foregrounds:
show_debug_message("BACK/FOREGROUNDS PHASE ------------------------------");
Number = ini_read_real(global.selected_part,"BackgroundNumber",0);
for(i=1;i&lt;=Number;i++){
    Xaxis="";
    Yaxis="";
    Asset="";
    Speed="";
    Xoffset="";
    Yoffset="";
    htiled="";
    vtiled="";
    Depth="";
    original = ini_read_string(global.selected_part,string(i)+"-createbackground","(2,1,sample_walls,-1,100,15,1,0,15)");
    original = string_replace(original,"(","");
    //Définition des variables
    for(j=1;j&gt;-1;j++){ //For Xaxis:
        if string_char_at(original,1) != ","{
            Xaxis += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Xaxis= "+Xaxis);
            show_debug_message("original= "+original);
            Xaxis = real(Xaxis);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For YAxis:
        if string_char_at(original,1) != ","{
            Yaxis += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Yaxis= "+Yaxis);
            show_debug_message("original= "+original);
            Yaxis = real(Yaxis);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Asset:
        if string_char_at(original,1) != ","{
            Asset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Asset= "+Asset);
            show_debug_message("original= "+original);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Speed:
        if string_char_at(original,1) != ","{
            Speed += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Speed= "+Speed);
            show_debug_message("original= "+original);
            Speed = real(Speed);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Xoffset:
        if string_char_at(original,1) != ","{
            Xoffset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Xoffset= "+Xoffset);
            show_debug_message("original= "+original);
            Xoffset = real(Xoffset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Yoffset:
        if string_char_at(original,1) != ","{
            Yoffset += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("Yoffset= "+Yoffset);
            show_debug_message("original= "+original);
            Yoffset = real(Yoffset);
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For htiled:
        if string_char_at(original,1) != ","{
            htiled += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("htiled= "+htiled);
            show_debug_message("original= "+original);
            htiled = real(htiled);
            if htiled = 0{htiled=1;}else{htiled=0;}
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For vtiled:
        if string_char_at(original,1) != ","{
            vtiled += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,",","");
            show_debug_message("vtiled= "+vtiled);
            show_debug_message("original= "+original);
            vtiled = real(vtiled);
            if vtiled = 0{vtiled=1;}else{vtiled=0;}
            j = -10;
            }
        }
    for(j=1;j&gt;-1;j++){ //For Depth:
        if string_char_at(original,1) != ")"{
            Depth += string_copy(original,1,1);
            original = string_replace(original,string_char_at(original,1),"");
            }
        else{
            original = string_replace(original,")","");
            show_debug_message("Depth= "+Depth);
            show_debug_message("original= "+original);
            Depth = real(Depth);
            j = -10;
            }
        }
    //Créons les objets et implantons leur propriétés.
    This_background = instance_create(0,0,object_background);
    This_background.Xaxis = Xaxis;
    This_background.Yaxis = Yaxis;
    This_background.Xoffset= Xoffset;
    This_background.Yoffset= Yoffset;
    This_background.sprite_index = asset_get_index("sprite_"+string(Asset));
    This_background.image_speed = Speed;
    This_background.htiled = htiled;
    This_background.vtiled = vtiled;
    This_background.depth = Depth;
    
    
    
    
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase création de l'overlay:
instance_create(x,y,object_start_overlay_1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase drawing:
instance_create(x+sprite_width,y,object_drawer);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase fermeture du fichier:
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
