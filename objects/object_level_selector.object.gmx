<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_level_select</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----INITIALIZE-----
Can_navigate = true;
image_speed = 0;
image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----ALLOW TO NAVIGATE-----
Can_navigate = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----BORDER CHECK-----
lv_index = collision_point(x+(sprite_width/2),y+(sprite_height/2),object_lv,false,true);
if lv_index != noone{
    if lv_index.image_index &gt; 5 {
        x = xprevious;
        }
    }
else{
    x = xprevious;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----CONTROLS-----
if Can_navigate{

    if global.axislh[0] &gt; 0.5{
        Can_navigate = false;
        alarm_set(0,15);
        if place_meeting(x+30,y,object_lv){
            xprevious = x;
            x += 28;
            }
        else{
            if x &lt; (object_white_book.sprite_width/2){
                xprevious = x;
                x = object_white_book.x+290;
                }
            else{
                xprevious = x;
                x = object_white_book.x+120;
                }
            }
        }
        
        
    if global.axislh[0] &lt; -0.5{
        Can_navigate = false;
        alarm_set(0,15);
        if place_meeting(x-30,y,object_lv){
            xprevious = x;
            x -= 28;
            }
        else{
            if x &lt; (object_white_book.sprite_width/2){
                xprevious = x;
                x = object_white_book.x+346;
                }
            else{
                xprevious = x;
                x = object_white_book.x+176;
                }
            }
        }
        
    }   
     
if global.shoulderr[0]{
    object_white_book.page += 2;
    visible = true;
    instance_destroy(object_levelpaper);
    instance_destroy(object_levelboard);
    instance_destroy(object_lv);
    instance_create(51,19,object_levelpaper);
    instance_create(221,19,object_levelpaper);
    instance_create(121,136,object_levelboard);
    instance_create(291,136,object_levelboard);
    
    //Calcul position:
    x= object_white_book.x+120;
    if collision_point(x+(sprite_width/2),y+(sprite_height/2),object_lv,false,true) = noone{
        x = object_white_book.x+290;
        if collision_point(x+(sprite_width/2),y+(sprite_height/2),object_lv,false,true) = noone{
            visible = false;
            }
        }    
                    
    }
if global.shoulderl[0]{
    object_white_book.page -= 2;
    instance_destroy(object_levelpaper);
    instance_destroy(object_levelboard);
    instance_destroy(object_lv);
    instance_create(51,19,object_levelpaper);
    instance_create(221,19,object_levelpaper);
    instance_create(121,136,object_levelboard);
    instance_create(291,136,object_levelboard);
    
    //Calcul position:
    x=object_white_book.x+120;
    if collision_point(x+(sprite_width/2),y+(sprite_height/2),object_lv,false,true) = noone{
        x = object_white_book.x+290;
        if collision_point(x+(sprite_width/2),y+(sprite_height/2),object_lv,false,true) = noone{
            visible = false;
            }
        } 
    }
    
//Image index:
img_index = collision_point(x+(sprite_width/2),y+(sprite_height/2),object_lv,false,true);
if img_index != noone{
    if round(img_index.image_index) = 5{
        image_index = 0;
        }
    else{
        image_index = 1;
        }
    }
            
if global.face1[0]{
    var SelectedButton = collision_point(x+(sprite_width/2),y+(sprite_height/2),object_lv,false,true);
    var PartToLoad = SelectedButton.image_index;
    var MyPaper = instance_nearest(x,y,object_levelpaper);
    var PossibleParts;
    PossibleParts[5]="Boss";
    PossibleParts[4]="PartFive";
    PossibleParts[3]="PartFour";
    PossibleParts[2]="PartThree";
    PossibleParts[1]="PartTwo";
    PossibleParts[0]="PartOne";
    
    if SelectedButton.MyColor = c_white{
        global.selected_level = LEVELS_DIR + "Level " + string(MyPaper.ID);
        
        for(i=0; i&lt;=5; i++){
            if i = PartToLoad{
                global.selected_part = PossibleParts[i];
                break;
                }
            }
        
            //Then go load the level:
            script_fade_status("room_level");
        }
    else{
        //Play a deny sound;
        show_error("This level isn't unlocked !" ,false);
        }
    }
    
if global.face2[0]{
    script_fade_status("TITLE");
    object_white_book.page = 0;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
