<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_right_hand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-902</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Utilisation des status afin d'adapter les animations:
Can_navigate=true;
STATUS = "DISPLAY";
Objective="";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transmet le status out à l'autre main un peu plus tôt vu que l'on disparaît
if instance_exists(object_pause){
    object_pause.STATUS = "OUT";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transmet le status out à l'autre main:
object_pause.STATUS = "OUT";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On passe en mode display:
STATUS="DISPLAY";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable the navigation
Can_navigate=true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Effectue des actions en fonction des STATUS
switch(STATUS){
    case "DISPLAY":
        //S'afficher avec une animation de décélération:
        y -= (y-(view_yview[0]+view_hview[0]-162)+12)/17;
        if abs(y-(view_yview[0]+view_hview[0]-162)) &lt; 0.3{
            y = view_yview[0]+view_hview[0]-162;
            STATUS= "SELECT";
            }
        break;
        
    case "OUT":
        //on sort avec une animatin acceleration:
        y += (y-(view_yview[0]+view_hview[0]-162)-12)/17;
        if y-46 &gt; view_yview[0]+view_hview[0]{
            instance_destroy();
            }
        break;
        
    case "SELECT":
        if !instance_exists(object_prompt){
            if Can_navigate{
                if abs(global.axislv[0]) &gt; 0.2{
                    if collision_line(x,y+sign(global.axislv[0])*27,object_resume.x,y+sign(global.axislv[0])*27,object_resume,false,false) != noone{
                        objective=y+sign(global.axislv[0])*27;
                        //objective_2=sign(objective)*4;
                        STATUS ="OBJECTIVE";
                        Can_navigate=false;
                        }
                    }
                }
            if global.face1[0] || global.start[0]{
                tempbutton=collision_line(x,y,object_resume.x,y,object_resume,false,false);
                //Là on va tester à quel bouton on a affaire.
                if collision_line(x,y,object_resume.x,y,object_home,false,false) != noone{
                    //Objet home:
                    temp_val_width=4;
                    }
                else{
                    if collision_line(x,y,object_resume.x,y,object_restart,false,false) != noone{
                        //Objet restart:
                        temp_val_width=3;
                        }
                    else{
                        if collision_line(x,y,object_resume.x,y,object_options,false,false) != noone{
                            //Objet options:
                            temp_val_width=2;
                            }
                        else{
                            if collision_line(x,y,object_resume.x,y,object_pockets,false,false) != noone{
                                //Objet poches:
                                temp_val_width=1;
                                }
                            else{
                                //Objet resume fait pas chier:
                                temp_val_width=0;
                                }
                            }
                        }
                    }
                
                
                temp_path=path_add();
                path_add_point(temp_path,x,y,100);
                path_add_point(temp_path,tempbutton.x+17,tempbutton.y+tempbutton.sprite_height+2,100);
                path_set_closed(temp_path,false);
                if temp_val_width &gt;= 3{
                    //Faut créer le prompt de gros enculé.
                    instance_create(x,y,object_prompt);
                    }
                else{
                    path_start(temp_path,2,path_action_stop,false);
                    STATUS = "UNDERLINE";
                    }
                    
                }   
            if global.face2[0]{
                STATUS = "OUT";
                alarm_set(2,12);
                }
            }
        break;
        
    case "OBJECTIVE":
        y += ((objective-y)+2*sign(objective-y))/5;
        if abs((objective-y))/5 &lt; 0.3{
            y = objective;
            STATUS = "SELECT"
            //le délai me pose problème car en gameplay normal, on attend déjà pour arrivé à la case demandé.
            //alarm_set(0,10);
            Can_navigate=true;
            }
        break;
    
    
    case "UNDERLINE":
        if !instance_exists(object_underline){
            path_speed= 2/sqrt(path_position);
            if path_position = 1{
                This_underline=instance_create(x,y,object_underline);
                draw_set_font(global.font_title);
                draw_set_halign(fa_left);
                This_underline.image_xscale=string_width(object_pause.texts[temp_val_width])/66;
                }
            }
        else{
            x+= (((object_pause.x+44)-x)+8)/15
            if abs(((object_pause.x+44)-x)/15) &lt; 0.4{
                x = object_pause.x+44;
                //Après ça l'animation est finie, il convient de passer sur un autre status pour enclencher tout ça.
                with(object_underline){
                    STATUS = "ACTION";   
                    }
                }
            }
        break;
        
    case "OUT-INVENTORY":
        //On sort et l'on invoque l'inventaire.
        if y-45 &lt; view_yview[0]+view_hview[0]{
            y += (((view_yview[0]+view_hview[0])-(y-45))+10)/15;
            }
        else{
            //On attend que l'inventaire disparaisse pour revenir.
            if !instance_exists(object_inventory) &amp;&amp; object_pause.alarm[1] = -1{
                if alarm[1]= -1{
                    alarm_set(1,10);
                    }
                }
            }
        break;
        
    case "OUT-OPTIONS":
        //On sort et l'on invoque le livre.
        if y-45 &lt; view_yview[0]+view_hview[0]{
            y += (((view_yview[0]+view_hview[0])-(y-45))+10)/15;
            }
        else{
            //On attend que le livre disparaisse pour revenir.
            if !instance_exists(object_white_book) &amp;&amp; object_pause.alarm[2] = -1{
                if alarm[1]= -1{
                    alarm_set(1,10);
                    }
                }
            }
        break;
        
        
        
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_text(x,y,string(path_position));
draw_text(x,y+15,string(path_endaction));
draw_text(x,y+30,string(STATUS));
if instance_exists(object_pause){
    draw_text(x,y+45,string(object_pause.STATUS));
    }





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
