<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On défini la taille de la chambre de test.
room_width=view_wview[0];
room_height=view_hview[0];

//Je dois créer les paramètres globaux du monde
global.grav=0.3;
global.jumpspeed=6;
global.movespeed=8;
global.frict=0.12;
global.bossfight=0;

//On doit créer des murs.
//Murs hauts:
ThisWall = instance_create(view_xview[0]+round(view_wview[0]/2)-161,144,object_wall);
ThisWall.sprite_index = sprite_Test_room_walls;
ThisWall.image_index = 0;

for(i=1;i&lt;=5;i++){
    ThisWall = instance_create(view_xview[0]+round(view_wview[0]/2)-161+(i*46),144,object_wall);
    ThisWall.sprite_index = sprite_Test_room_walls;
    ThisWall.image_index = 1;
    }

ThisWall = instance_create(view_xview[0]+round(view_wview[0]/2)+115,144,object_wall);
ThisWall.sprite_index = sprite_Test_room_walls;
ThisWall.image_index = 2;

//Puis on crée le mur de droite:
ThisWall = instance_create(view_xview[0]+round(view_wview[0]/2)+162,33,object_wall);
ThisWall.sprite_index = sprite_Test_room_calques;

//Mur du bas.
for(i=0;i&lt;=6;i++){
    ThisWall = instance_create(view_xview[0]+round(view_wview[0]/2)-161+(i*46),192,object_wall);
    ThisWall.sprite_index = sprite_Test_room_walls;
    ThisWall.image_index = 3;
    }
    
//Vite fait la plateforme horizontale.
This_platform = instance_create(165,78,object_horizontal_platform);
This_platform.spr_index = sprite_test_platform;
This_platform.movespeed = 1;
This_platform.distance=35;

//Faut faire le dummy:
This_pushable=instance_create(view_xview[0]+(view_wview[0]/2),0,object_pushable);
This_pushable.sprite_index=sprite_Test_room_pushable;
This_pushable.pushspeed=1;

//Puis (et enfin) Shai !
instance_create(view_xview[0]+(view_wview[0]/3),100,object_player);


//On crée la couleur:
col=make_colour_rgb(48,48,48)

//Initialisation des compteurs:
Shai_out=0;






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//On place quelque compteurs:
if instance_exists(object_player){
    if object_player.y-(object_player.sprite_height/2) &gt; room_height{
        object_player.x=view_xview[0]+(view_wview[0]/3);
        object_player.y=100
        Shai_out ++;
        }
    }

if Shai_out = 3{
    script_fade_status("room_title","OPTIONS-MAPPING");
    Shai_out=0;
    }

if instance_exists(object_pushable){
    if object_pushable.y-(object_pushable.sprite_height/2) &gt; room_height{
        object_pushable.x=view_xview[0]+(view_wview[0]/2);
        object_pushable.y=0;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On dessine l'overlay en fait. Fucking pain to make it available for multiple screen ratios.
//Le haut.
draw_sprite(sprite_overlay_upper_left,0,view_xview[0],view_yview[0]);
draw_sprite_ext(sprite_overlay_upper_middle,0,view_xview[0]+sprite_get_width(sprite_overlay_upper_left),view_yview[0],((view_xview[0]+view_wview[0])-sprite_get_width(sprite_overlay_upper_right))-(view_xview[0]+sprite_get_width(sprite_overlay_upper_left)),1,0,c_white,1);
draw_sprite(sprite_overlay_upper_right,0,(view_xview[0]+view_wview[0]-1),view_yview[0]);

//Le bas:
draw_sprite(sprite_overlay_bottom_left,0,view_xview[0],view_yview[0]+view_hview[0]-1);
draw_sprite_ext(sprite_overlay_bottom_middle,0,view_xview[0]+sprite_get_width(sprite_overlay_bottom_left),view_yview[0]+view_hview[0]-1,((view_xview[0]+view_wview[0])-sprite_get_width(sprite_overlay_bottom_right))-(view_xview[0]+sprite_get_width(sprite_overlay_bottom_left)),1,0,c_white,1);
draw_sprite(sprite_overlay_bottom_right,0,(view_xview[0]+view_wview[0]-1),view_yview[0]+view_hview[0]-1);

//Bon je n'ai pas dessiné les barres...
//Barre du bas:
draw_sprite(sprite_overlay_bar_arrow,0,view_xview[0],view_yview[0]+view_hview[0]-sprite_get_height(sprite_overlay_bottom_left)-1);
draw_sprite_ext(sprite_overlay_bar_middle,0,view_xview[0]+sprite_get_width(sprite_overlay_bar_arrow),view_yview[0]+view_hview[0]-sprite_get_height(sprite_overlay_bottom_left)-1,(view_xview[0]+view_wview[0]-sprite_get_width(sprite_overlay_bar_arrow)-5)-(view_xview[0]+sprite_get_width(sprite_overlay_bar_arrow)),1,0,c_white,1);
draw_sprite_ext(sprite_overlay_bar_arrow,0,view_xview[0]+view_wview[0]-6,view_yview[0]+view_hview[0]-sprite_get_height(sprite_overlay_bottom_right)-1,-1,1,0,c_white,1);


//Barre de droite:
draw_sprite_ext(sprite_overlay_bar_arrow,0,view_xview[0]+view_wview[0]+1-sprite_get_height(sprite_overlay_bar_arrow),view_yview[0]+sprite_get_height(sprite_overlay_upper_right),1,1,-90,c_white,1);
draw_sprite_ext(sprite_overlay_bar_middle,0,view_xview[0]+view_wview[0]+1-sprite_get_height(sprite_overlay_bar_arrow),view_yview[0]+sprite_get_height(sprite_overlay_upper_right)+sprite_get_width(sprite_overlay_bar_arrow),(view_yview[0]+view_hview[0]-5-sprite_get_height(sprite_overlay_bottom_right)-sprite_get_width(sprite_overlay_bar_arrow))-(view_yview[0]+sprite_get_height(sprite_overlay_upper_right)+sprite_get_width(sprite_overlay_bar_arrow)),1,-90,c_white,1);
draw_sprite_ext(sprite_overlay_bar_arrow,0,view_xview[0]+view_wview[0]-1,view_yview[0]+view_hview[0]-5-sprite_get_height(sprite_overlay_bottom_right)-1,1,1,90,c_white,1);

//Dessiner un petit rectangle de merde.
draw_rectangle_colour(view_xview[0]+view_wview[0]-6,view_yview[0]+view_hview[0]-sprite_get_height(sprite_overlay_bottom_right)-6,view_xview[0]+view_wview[0],view_yview[0]+view_hview[0]-sprite_get_height(sprite_overlay_bottom_right)-1,col,col,col,col,false);

//Dessiner les barres plus foncées. Que en présence du joueur:
if instance_exists(object_player){
    draw_sprite(sprite_overlay_select_bar,0,clamp(object_player.x,view_xview[0]+sprite_get_width(sprite_overlay_bar_arrow)+(sprite_get_width(sprite_overlay_select_bar)/2),view_xview[0]+view_wview[0]-sprite_get_width(sprite_overlay_bar_arrow)-(sprite_get_width(sprite_overlay_select_bar)/2)-6),view_yview[0]+view_hview[0]-sprite_get_height(sprite_overlay_bottom_left));
    draw_sprite(sprite_overlay_select_bar_side,0,view_xview[0]+view_wview[0],clamp(object_player.y,view_yview[0]+sprite_get_height(sprite_overlay_upper_right)+sprite_get_width(sprite_overlay_bar_arrow)+(sprite_get_height(sprite_overlay_select_bar_side)/2),view_yview[0]+view_hview[0]-sprite_get_height(sprite_overlay_upper_right)-sprite_get_width(sprite_overlay_bar_arrow)-(sprite_get_height(sprite_overlay_select_bar_side)/2)-5));
    }
//draw_sprite(sprite_overlay_



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
