<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_board</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----GATHER INFORMATIONS FOR THE BOARD-----

//Initialisation
texts = script_word_light(60,62);
ID = (instance_number(object_levelboard)+object_white_book.page);
font_lv = font_add_sprite_ext(sprite_font_lv,"0123456789/:",true,1);
MyPaper = instance_nearest(x,y,object_levelpaper);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----CREATE AND COLORIZE LEVEL BUTTONS-----
var This_button;
for(i=0; i &lt; array_length_1d(MyPaper.LevelParts); i++){
    This_button = instance_create( x+3 + (i*28), y - 9, object_lv);
    This_button.image_index = MyPaper.LevelParts[i];
    
    if MyPaper.AllowedParts[i] = 1{
        This_button.MyColor = c_white;
        }
    else{
        This_button.MyColor = c_gray;
        }
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----DRAW LEVEL INFO-----
//SIDE NOTE ! The space between each case is 28 pixels. You could use a for loop to optimize the code, however this kind of modification aren't great for future updates.
draw_set_font(font_lv);
draw_set_halign(fa_right);
if is_array(MyPaper.LevelParts) &amp;&amp; is_array(MyPaper.LevelPartsData){
    if array_length_1d(MyPaper.LevelParts) &gt; 0 {
        
        //Board part
        draw_sprite_part(sprite_board,0,0,0,28,sprite_height,x,y);
        
        //Icons
        draw_sprite(sprite_board_left,0,x-72,y+6);
        draw_sprite(sprite_board_left,1,x-72,y+32);
        draw_sprite(sprite_board_left,2,x-73,y+59);
        
        //Icons text
        draw_set_font(global.font_short);
        draw_set_halign(fa_left);
        draw_text(x-61,y+21,texts[0]);
        draw_text(x-61,y+48,texts[1]);
        draw_text(x-60,y+76,texts[2]);
        
        draw_set_font(font_lv);
        draw_set_halign(fa_right);
        
        //First column
        draw_text(x+14, y+13, string(MyPaper.CollectedRionys[MyPaper.LevelParts[0]]));
        draw_text(x+27, y+27, string(MyPaper.LevelPartsData[0,1]));
        
        draw_text(x+27, y+47, string(floor(MyPaper.CompletionTimes[MyPaper.LevelParts[0]]/60)) + ":" + string(frac(MyPaper.CompletionTimes[MyPaper.LevelParts[0]]/60)*60));
        
        draw_text(x+14, y+67, string(MyPaper.KilledFoes[MyPaper.LevelParts[0]]));
        draw_text(x+27, y+sprite_height+1, string(MyPaper.LevelPartsData[0,0]));
        
        
        
        if array_length_1d(MyPaper.LevelParts) &gt; 1{
            //Second column
            draw_sprite_part(sprite_board,0,28,0,28,sprite_height,x+28,y);
            
            
            draw_text(x+42, y+13, string(MyPaper.CollectedRionys[MyPaper.LevelParts[1]]));
            draw_text(x+55, y+27, string(MyPaper.LevelPartsData[1,1]));
            
            draw_text(x+55, y+47, string(floor(MyPaper.CompletionTimes[MyPaper.LevelParts[1]]/60)) + ":" + string(frac(MyPaper.CompletionTimes[MyPaper.LevelParts[1]]/60)*60));
            
            draw_text(x+42, y+67, string(MyPaper.KilledFoes[MyPaper.LevelParts[1]]));
            draw_text(x+55, y+sprite_height+1, string(MyPaper.LevelPartsData[1,0]));
                
            
            if array_length_1d(MyPaper.LevelParts) &gt; 2{
                //Third column
                draw_sprite_part(sprite_board,0,56,0,56,sprite_height,x+56,y); 
                
                
                draw_text(x+70, y+13, string(MyPaper.CollectedRionys[MyPaper.LevelParts[2]]));
                draw_text(x+83, y+27, string(MyPaper.LevelPartsData[2,1]));
                
                draw_text(x+84, y+47, string(floor(MyPaper.CompletionTimes[MyPaper.LevelParts[2]]/60)) + ":" + string(frac(MyPaper.CompletionTimes[MyPaper.LevelParts[1]]/60)*60));
                
                draw_text(x+70, y+67, string(MyPaper.KilledFoes[MyPaper.LevelParts[2]]));
                draw_text(x+83, y+sprite_height+1, string(MyPaper.LevelPartsData[2,0]));
                
                }
            } 
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
