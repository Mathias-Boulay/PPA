<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprite_pushing</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.3;
hsp = 0;
vsp = 0;
jumpspeed = 5.75;
movespeed = 8;
jumpcount = 0;
divejumpcount = 0;
attackcount = 0;
frict = 0.10;
ontheground=false;
walljumppower =0;
looking = 0;
invicible = false;
crounching = 0;
waiting = 0;
bossfight = false;
yplus = 10;
yrealplus = 3;

//From the 2.test... Version:
hurted = 0;
accelerate = 0;
Can_jump = true;
Pause = 0;
debug = 0;
places_left = 6;
rionys = 9999999;

//From the alpha V3 !
STATUS = "idle";
ID = (instance_number(object_player)-1);        


//Adding hud
instance_create(x,y,object_hud);
instance_create(x,y,object_camera);

var i;
i = 0;
repeat(array_length_1d(object_hud.numberofitems))
    {
    places_left -= object_hud.numberofitems[i]
    i += 1;
    }

//From moving platforms (does not working)
hsp_carry = 0;
vsp_carry = 0;

//From the uncontrolable platform
uncontrol = 0;

//The goodness !
goodness = 86;

//Have I much time ?
time = 666;

// Am I immortal ?
life = 3;
heart_1 = instance_create(view_xview[0]+7,view_yview[0]+47,object_heart);
heart_2 = instance_create(view_xview[0]+20,view_yview[0]+47,object_heart);
heart_3 = instance_create(view_xview[0]+33,view_yview[0]+47,object_heart); 
//heart_3.state = "fire";

//From the second try:
vertical = 0;

//First die:
fade_black = false;

//From the alpha phased hud
/*item_1 = 0;
item_2 = 0;
item_3 = 0;
item_4 = 0;
item_5 = 0;
item_6 = 0;
*/

//idle speed (60 FPS)
//image_speed = 0.033;
//image_speed = 0.1;

//debug:
instance_create(x,y,object_debug);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump from dive. The player needs to be ontheground
hsp = image_xscale * 2;
walljumppower = image_xscale * 2;
sprite_index = sprite_jumpfromdive;
//image_speed = 0.09;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump. This alarm thinks to add the jumpcount.
if ontheground{
    vsp = -jumpspeed;
    jumpcount += 1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player Can_jump again !
Can_jump = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The spin attack is over !
if (vsp &lt; -grav){STATUS = "jumping";}
else{
     if (abs(vsp) &lt; 1){STATUS = "pre_landing";}
    else{
        if vsp &gt;= 1{STATUS = "landing";}
        }
    }
                    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///De-activated Shai movements V2.test.ça.va.buger.pas.autant.que.je.le.pensais.
//Desactivation quotes:
/*

///Player's movement (this time it includes animations ! "not finished because of.. oh whatever.") V2.test.ça.va.buger.pas.autant.que.je.le.pensais
//Just checking if the game is paused:
if !instance_exists(object_pause)
    {
    //or if we looking for something in a shop
    if (sprite_index = sprite_lookup &amp;&amp; place_meeting(x,y,object_seller))
        {
        if gamepad_button_check_pressed(0,gp_face2)
            {
            sprite_index = sprite_idle;
            }
        }
    else
        {
//Get the player's input (not optimized because I can't do anything on it)
key_jump = gamepad_button_check_pressed(0,gp_face1); 
key_jump_held = gamepad_button_check(0,gp_face1);
move = gamepad_axis_value(0,gp_axislh)*uncontrol;
looking = gamepad_axis_value(0,gp_axislv);

//Correcting inputs
if (move &lt; 0.1 &amp;&amp; move &gt; -0.1) 
    {
    move =0;
    }
else
    {
    if (place_meeting(x+1,y,object_wall) || place_meeting(x-1,y,object_wall)) &amp;&amp; (ontheground = false)
        {
        move = 0;
        }
    else
        {
        if (sprite_index = sprite_crounching || sprite_index = sprite_decrounching || sprite_index = sprite_headshot)
            {
            move = 0
            }
        }
    }        

// reaction to the "move" input (more precise but worse optimization)


    
//See how height the player can climb


//The player can finally be hurted ( just visually, don't hope to much)


//Verifying the speed of the player (Finally IT WORKS !)
  
if (sign(hsp)=1 &amp;&amp; sign(move)= -1 ) || (sign(hsp) = -1 &amp;&amp; sign(move) = 1)
    {
    accelerate = sign(move);
    }
else
    {
    if hsp &lt;= (move*3.99)
        {
        accelerate =1;
        }
    else
        {
        if hsp &gt; (move*3.99)
            {
            accelerate = -1;
            }
        }
    }
    
    
    
if (abs(hsp) &lt;= 3.99)
    {
    if (sprite_index != sprite_lookup &amp;&amp; sprite_index !=sprite_unlookup &amp;&amp; sprite_index != sprite_crounching &amp;&amp; sprite_index != sprite_decrounching &amp;&amp; sprite_index != sprite_divejumping)
        {
        if ontheground
            {
            if move &gt; 0 || move &lt; 0
                {
                if abs(hsp)+abs((movespeed/100)) &lt; abs(move*4)
                    {
                    hsp = hsp +(movespeed/100)*accelerate;
                    }
                }
            }
        else
            {
            if move &gt; 0 || move &lt; 0
                {
                hsp = hsp +(movespeed/60)*accelerate;
                }
            }
        }
    else
        {
        if (sprite_index = sprite_divejumping &amp;&amp; ontheground = false)
            {
            if move &gt;0 || move &lt; 0
                {
                hsp = hsp +(movespeed/50)*accelerate;
                }
            }
        }
    }
    


if sprite_index != sprite_hurted
    {    
    hsp = clamp(hsp,-4,4);
    }





// applying the gravity (just lightly reformated)
if (vsp &lt; 9) 
    {
    vsp += grav;
    }
    
// applying the friction on "hsp"
if (move = 0 || sprite_index = sprite_divejumping &amp;&amp; ontheground = true) || (sign(hsp) = 1 &amp;&amp; sign(move)= -1) || (sign(hsp) = -1 &amp;&amp; sign(move) = 1)
    {
    if (hsp &gt; (-frict) &amp;&amp; hsp &lt; frict) 
        { 
        hsp = 0;
        }
    else
        {
        if hsp &gt; 0
            {
            hsp -= frict;
            }
        else
            {
            if hsp &lt; 0
                {
                hsp += frict;
                }
            }
        }
    }

        
    
    
// applying the friction on "walljumppower" (more precise than before but may be a bit slower)
if (walljumppower &gt;(-frict/2) &amp;&amp; walljumppower &lt; frict/2)
        {
        walljumppower = 0;
        }
    else
        {
        if walljumppower &gt; 0
            {
            walljumppower= (walljumppower-frict);
            }
        else
            {
            walljumppower= (walljumppower+frict);
            }
        }
        
//Verifying if the player is on the ground and then applying good parameters
if place_meeting(x,y+1,object_wall)
    {
    if place_meeting(x,y+1,object_uncontrol_platform)
        {
        uncontrol = (-1);
        }
    ontheground= true;
    jumpcount=0;
    attackcount = 0;
    }
else
    {
    ontheground = false;
    uncontrol =1;
    if jumpcount = 0 //Removing the first jump if the player fall without using any jump before.
        {
        jumpcount = 1;
        }
    }
    
    
//Ok, now time to JUMP !
if gamepad_button_check_pressed(0,gp_face1)
    {
    if invicible =0  //if the player hasn't been touched by an enemy and if he's not crounching like a Shy 
        {
        if sprite_index != sprite_crounching
            {
            if ontheground = false
                {       
                if place_meeting(x-1,y,object_wall)
                    {
                    walljumppower = 4;
                    hsp = 2;
                    vsp = key_jump * -jumpspeed;
                    }
                else
                    {
                    if place_meeting(x+1,y,object_wall)
                        {
                        walljumppower = (-4);
                        hsp = -2;
                        vsp = key_jump * -jumpspeed;
                        }
                    else
                        {
                        if jumpcount &lt; 2
                            {
                            if Can_jump
                                {
                                alarm_set(2,1);
                                alarm_set(1,15);
                                Can_jump = false;
                                }
                            }
                        }
                    }
                }
            else
                {
                if sprite_index = sprite_divejumping &amp;&amp; ontheground = true
                    {
                    if Can_jump
                        {
                        alarm_set(1,23);
                        alarm_set(2,8);
                        alarm_set(3,8);
                        Can_jump = false;
                        sprite_index = sprite_jumpfromdive;
                        image_speed = 0.25;
                        }
                    else
                        {
                        if jumpcount &lt; 2
                            {
                            if Can_jump
                                {
                                alarm_set(2,1);
                                alarm_set(1,15);
                                Can_jump = false;
                                }
                            }
                        }
                    }
                else
                    {
                    if jumpcount &lt; 2
                        {
                        if Can_jump
                            {
                            alarm_set(2,1);
                            alarm_set(1,15);
                            Can_jump = false;
                            }
                        }
                    }
                }
            }
        else
            {
            if jumpcount &lt; 2
                {
                if Can_jump
                    {
                    alarm_set(2,1);
                    alarm_set(1,15);
                    Can_jump = false;
                    }
                }
            }
        }
    }
    

    
//Applying variable jump height. Must add a check if we add mecanics like springs.
if (attackcount =0 &amp;&amp; sprite_index != sprite_jumpfromdive &amp;&amp; sprite_index != sprite_hurted)
    {
    if ((vsp &lt; 0) &amp;&amp; (!key_jump_held))
        {
        vsp = max(vsp, -jumpspeed/2);
        }
    } 
    
//And I want to attack the others !
if (gamepad_button_check_pressed(0,gp_face2) &amp;&amp; ontheground = false &amp;&amp; attackcount =0 &amp;&amp; invicible =0 &amp;&amp; sprite_index != sprite_jumpfromdive)
    {
    if place_meeting(x+1,y,object_wall) 
        {
        //divejump from a rightwall
        hsp = -3;
        walljumppower = -4;
        vsp = 1 * -jumpspeed;
        attackcount = attackcount +1;
        sprite_index = sprite_divejumping;
        image_speed = 0.12;
        }
    else
        {
        if place_meeting(x-1,y,object_wall)
            {
            //divejump from a leftwall
            hsp = 3;
            walljumppower = 4;
            vsp = 1 * -jumpspeed;
            attackcount = attackcount +1;
            sprite_index = sprite_divejumping;
            image_speed = 0.12;
            }
        else//do the divejump from nowhere
            {
            if move &gt; 0.80
                {
                if Can_jump
                    {
                    hsp = hsp +3;
                    walljumppower = walljumppower + 1;
                    vsp = 1 * -jumpspeed;
                    attackcount = attackcount + 1;
                    sprite_index = sprite_divejumping;
                    image_speed = 0.12;
                    alarm_set(1,15);
                    Can_jump = false;
                    }
                }
            else
                {
                if move &lt; -0.80
                    {
                    if Can_jump
                        {
                        hsp = hsp+ (-3);
                        walljumppower = walljumppower -1;
                        vsp = 1 * -jumpspeed;
                        attackcount = attackcount +1;
                        sprite_index = sprite_divejumping;
                        image_speed = 0.12;
                        alarm_set(1,15);
                        Can_jump = false;
                        }
                    }
                else
                    {
                    //do the star attack
                    sprite_index = sprite_spinattack;
                    alarm_set(0,30);
                    attackcount = attackcount +1; 
                    }
                }
            }
        }
    }
else 
    {
    if (ontheground &amp;&amp; gamepad_button_check_pressed(0,gp_face2))
        {
        if move &gt; 0.85
            {
            if Can_jump
                {
                hsp = hsp+2;
                walljumppower = walljumppower +1;
                attackcount = attackcount + 1;
                vsp = 1 * -jumpspeed;
                sprite_index = sprite_divejumping;
                image_speed = 0.12;
                alarm_set(1,15);
                Can_jump = false;
                }
            }
        else
            {
            if move &lt; -0.85
                {
                if Can_jump
                    {
                    hsp = hsp -2;
                    walljumppower = walljumppower +1;
                    attackcount = attackcount +1;
                    vsp = 1 * -jumpspeed;
                    sprite_index = sprite_divejumping;
                    image_speed = 0.12;
                    alarm_set(1,15);
                    Can_jump = false;
                    }
                }
            else
                {
                //Alorsiciondoitnormalementfaireuncoupdetêtemaisjesuispastropsursij'auraiuneanimationconcernantçaunjourparcequebonleshitsboxssontdéjàassezchiantescommeçaetpuisquejesuispassurquelereworkvamarcherauvudesdernièresconstatationavecmonfrèrequiavucommemoiquel'ons'esttéléportéàunautrepointdelamapmaispeutêtrequ'avecmonnouveausystèmedecollisionrefaitpouréviterencoremieudesbouclesinfiniesçapasseraparfaitementparcequejesuisungénie...
                //Jefiniparavoirl'impressionquecettezoneestdestinéàêtrevidevuqueeddyn'arrivepasàfaireuntrucquiluiconvient
                if sprite_index != sprite_headshot
                    {
                    sprite_index = sprite_headshot;
                    image_speed = 0.4;
                    waiting = 0;
                    }
                attackcount = attackcount +1;
                }
            }
        }
    }
        

    
//I need collision ! I'm making a fu*king fusion with all of these walls !

//Vertical Collision with a wall (very lightly reformated)

if (!place_meeting(x,y+(vsp),object_wall))
    {
    if (!place_meeting(x,y+sign(vsp),object_wall))
        {
        y += vsp;
        }
    else
        {
        vsp = 0;
        }
    }
else
    {
    while (!place_meeting(x,y+sign(vsp),object_wall))
        {
        y += sign(vsp);
        }
    if place_meeting(x,y+sign(vsp),object_wall)
        {
        vsp = 0;
        }
    }




//Horizontal Collision with a wall (heavily modified, added support of slopes and removed unneeded "while" statements)
if (!place_meeting(x+(hsp+walljumppower+hsp_carry),y,object_wall))
    {
    if (!place_meeting(x+sign(hsp+walljumppower),y,object_wall))
        {
        x += (hsp+walljumppower+hsp_carry);
        }
    else
        {
        hsp = 0;
        hsp_carry = 0;
        walljumppower =0;
        }
    }
else
    {
    if ontheground
        {
        yrealplus = 3;
        while(place_meeting(x+(hsp+walljumppower),y-yrealplus,object_wall) &amp;&amp; yrealplus &lt; 10)
            {
            yrealplus += 1;
            }
        if (place_meeting(x+(hsp+walljumppower),y-yplus,object_wall))
            {
            if (!place_meeting(x+sign(hsp+walljumppower),y-yplus,object_wall))
                {
                x += sign(hsp +walljumppower+hsp_carry);
                }
            else
                {
                hsp = 0;
                hsp_carry = 0;
                walljumppower = 0;
                }
            }
        else
            {
            x += (hsp+walljumppower);
            y -= yrealplus;
            }
        }
    else
        {
        if (!place_meeting(x+sign(hsp+walljumppower),y,object_wall))
            {
            x += sign(hsp+walljumppower);
            }
        else
            {
            hsp = 0;
            hsp_carry = 0;
            walljumppower =0;
            }
        }
    }
        


           
//horizontal collision correction (cancelling the last horizontal move if Shai is stuck in a wall)
if place_meeting(x,y,object_wall)
    {
    if (!place_meeting(x-1,y,object_wall))
        {
        x -= 1;
        }
    else
        {
        if (!place_meeting(x+1,y,object_wall))
            {
            x +=1;
            }
        }
    }
    
//vertical collision correction (because seems something wrong...)
if place_meeting(x,y,object_wall)
    {
    y = yprevious;
    }
   
//Hey !!! Can I be animated, fucking dev ? Ledge animation isn't missing this time !
// Isn't finished yet ! I want new animations ! 
             
//set the direction of the sprite
if sprite_index = sprite_hurted
    {
    //image_xscale = sign(hsp) *-1;
    }
else
    {
    if sprite_index != sprite_divejumping || sprite_index != sprite_jumpfromdive || sprite_index != sprite_spinattack 
        {    
        if place_meeting(x-1,y,object_wall)
            {
            image_xscale = -1;
            }
        else
            {
            if place_meeting(x+1,y,object_wall)
                {
                image_xscale = 1;
                }
            else
                {
                if hsp &gt; 0.1
                    {
                    image_xscale=1;
                    }
                else
                    {
                    if hsp &lt; -0.1
                        {
                        image_xscale = -1;
                        }
                    }
                }
            }
        }
    }


        
//Bêta phase... hope it will work !
if sprite_index != sprite_hurted
    {
    if ontheground
        {
        if sprite_index != sprite_jumpfromdive &amp;&amp; sprite_index != sprite_headshot
            {
            if (sprite_index != sprite_divejumping)
                {
                if (looking = 1)
                            {
                            sprite_index = sprite_crounching;
                            image_speed = 0.2;
                            }
                        else
                            {
                            if (looking &lt; 1 &amp;&amp; sprite_index = sprite_crounching)
                                {
                                sprite_index = sprite_decrounching;
                                image_speed = 0.1;
                                }
                                else
                                    {
                                    if sprite_index = sprite_decrounching
                                        {
                                        //Do absolutly nothing
                                        }
                                    else
                                        {
                                    if gamepad_button_check_pressed(0,gp_face1)
                                        {
                                        sprite_index = sprite_pre_jumping;
                                        }
                                    else
                                        {
                                        if (sign(move) = 1 &amp;&amp; sign(hsp) = -1 || sign(move) = -1 &amp;&amp; sign(hsp) = 1 )
                                            {
                                            sprite_index = sprite_stopping;
                                            }
                                        else
                                            {    
                                            if (abs(hsp) &gt; 0 &amp;&amp; abs(hsp) &lt;= 3.5)
                                                {
                                                sprite_index = sprite_walking;
                                                image_speed = abs(hsp)/32; 
                                                }
                                            else
                                                {
                                                if abs(hsp) &gt; 3.5
                                                    {
                                                    sprite_index = sprite_running;
                                                    image_speed = abs(hsp)/16;
                                                    }
                                                else//it means hsp = 0 or something very near that
                                                    {
                                                    if looking &lt; -0.99  
                                                        {
                                                        sprite_index = sprite_lookup;
                                                        image_speed = 0.025;
                                                        }
                                                    else
                                                        {
                                                        if (looking &gt; -0.99 &amp;&amp; sprite_index= sprite_lookup)
                                                            {
                                                            sprite_index = sprite_unlookup;
                                                            image_speed = 0.05;
                                                            }
                                                        else
                                                            {
                                                            if sprite_index = sprite_unlookup
                                                                {
                                                                //Do basically nothing
                                                                }
                                                            else
                                                                {
                                                                if (place_meeting(x+1,y,object_wall) || place_meeting(x-1,y,object_wall)) &amp;&amp; ( abs(move) !=0)
                                                                    {
                                                                    sprite_index = sprite_pushing;
                                                                    image_speed = abs(move/5);
                                                                    }
                                                                else
                                                                    {
                                                                    if (collision_line(x,y,x+(10*image_xscale),y+40,object_wall,false,true) = noone )
                                                                        {
                                                                        sprite_index = sprite_ledge;
                                                                        image_speed = 0.15;
                                                                        }
                                                                    else
                                                                        {
                                                                        if waiting &gt; 0.9
                                                                            {
                                                                            if (waiting &gt; 1 &amp;&amp; waiting &lt; 1.1) || (waiting &gt; 2 &amp;&amp; waiting &lt; 2.1)  
                                                                                {
                                                                                sprite_index = sprite_waiting;
                                                                                image_speed = 0.1;
                                                                                }
                                                                            else
                                                                                {
                                                                                if waiting &gt;= 3 &amp;&amp; waiting &lt; 6
                                                                                    {
                                                                                    sprite_index = sprite_waiting_phase_2;
                                                                                    image_speed = 0.1;
                                                                                    if image_index &gt;= 2
                                                                                        {
                                                                                        image_index = 2;
                                                                                        }    
                                                                                    }
                                                                                else
                                                                                    {
                                                                                    if waiting &gt;= 6
                                                                                        {
                                                                                        sprite_index = sprite_waiting_phase_3;
                                                                                        if image_index &gt; 4 &amp;&amp; image_index &lt; 5
                                                                                            {
                                                                                            image_speed = 0.00080;
                                                                                            }
                                                                                        else
                                                                                            {
                                                                                            image_speed = 0.1;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                                { 
                                                                                if bossfight = 1
                                                                                    {
                                                                                    sprite_index = sprite_idle_bossfight;
                                                                                    image_speed = 0.033;
                                                                                    }
                                                                                else
                                                                                    {
                                                                                    if place_meeting(x,y+1,object_uncontrol_platform)
                                                                                        {
                                                                                        sprite_index = sprite_rotating;
                                                                                        image_speed = 0.09;
                                                                                        }
                                                                                    else
                                                                                        {
                                                                                        sprite_index = sprite_idle;
                                                                                        image_speed = 0.033;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                    
                                
                            
                    }
                else
                    {
                    if gamepad_button_check_pressed(0,gp_face1)
                        {
                        sprite_index = sprite_jumpfromdive;
                        }
                    }
                }
            }
        else
            {
            if sprite_index != sprite_divejumping
                {
                if sprite_index != sprite_jumpfromdive
                    {                    
                    if (sprite_index != sprite_spinattack &amp;&amp; sprite_index != sprite_crounching)
                        {
                        if (place_meeting(x+1,y,object_wall) || place_meeting(x-1,y,object_wall))
                            {
                            sprite_index = sprite_walljump;
                            }
                        else
                            {
                            if (vsp &lt; -grav*2)
                                {      
                                sprite_index = sprite_jumping;
                                image_speed = 0.4;
                                }
                            else
                                {
                                if (!place_meeting(x,y+yplus,object_wall))
                                    {
                                    if (vsp &gt; (-grav*2) &amp;&amp; vsp &lt; (grav*2))
                                        {
                                        sprite_index = sprite_pre_landing;
                                    image_speed = 0.5;
                                        }
                                    else
                                        {
                                        sprite_index = sprite_landing;
                                        image_speed = 0.5;
                                        }
                                    }
                                }
                            }
                        }
                    }
                else{
                    if y &gt; yprevious &amp;&amp; ontheground = true
                        {
                        sprite_index = sprite_idle;
                        }
                    }
                }
            else
                {
                if gamepad_button_check_pressed(0,gp_face1)
                    {
                    sprite_index = sprite_jumping;
                    image_speed = 0.5;
                    }
                else
                    {
                    if (place_meeting(x+1,y,object_wall) || place_meeting(x-1,y,object_wall))
                        {
                        hurted = (hsp+walljumppower)*(-1);
                        //sprite_index = sprite_walljump;
                        }
                    }
                }
            }
        }
else
    {
    if place_meeting(x,y+1,object_wall)
        {
        sprite_index = sprite_idle;
        }
    else
        {
        if place_meeting(x-1,y,object_wall)
            {
            sprite_index = sprite_walljump;
            image_xscale = -1;
            }
        else
            {
            if place_meeting(x+1,y,object_wall)
                {
                sprite_index = sprite_walljump;
                image_xscale = 1;
                }
            }
        }
    }


//Waiting increment:
if (x = xprevious &amp;&amp; y = yprevious)
    {
    waiting += 0.0012;
    }
else
    {
    waiting = 0;
    }

//Pause activation:
if gamepad_button_check_pressed(0,gp_start)
    {
    if (!instance_exists(object_pause))
        {
        
        
        }   
    }
    
//Activate (or not) debuging functions:
if gamepad_button_check_pressed(0,gp_stickr)
    {
    debug +=1;
    if debug &gt; 1
        {
        debug = 0;
        }
    }
    
//Debuging section: Here I put every things I want to test with keyboard keys
if keyboard_check_pressed(ord('H'))
    {
    hurted = 4;
    }
if keyboard_check_pressed(ord('J'))
    {
    hurted = -4;
    }
//Avec ça on branlera moins la manette.
if gamepad_button_check_pressed(0,gp_stickl)
    {
    y = y -400;
    }
    //Shop thing______________________________________________________________________________________________________________
    }
    //Pause thing ______________________________________________________________________________________________________________
    }
else
    {
    image_speed = 0;
    }*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shai movements alpha V3 !
//Check if the game is paused or is the player looking articles:
if !instance_exists(object_pause){
    if (sprite_index = sprite_lookup &amp;&amp; place_meeting(x,y,object_seller)){
        if gamepad_button_check_pressed(ID,gp_face2){
            sprite_index = sprite_idle;
            }
        }
    else{
        
        
        //Test collisions around the player against walls:
        next_right = place_meeting(x+1,y,object_wall);
        next_left = place_meeting(x-1,y,object_wall);
        next_bottom = place_meeting(x,y+1,object_wall);
        next_top = place_meeting(x,y-1,object_wall);
        
        //If the player ontheground ?
        if next_bottom{
            if place_meeting(x,y+1,object_uncontrol_platform){uncontrol= -1;}
            ontheground = true;
            jumpcount = 0;
            attackcount = 0;
            }
        else{
            ontheground = false;
            uncontrol = 1;
            if jumpcount = 0{jumpcount = 1;}
            }      
            
        //Get the player's input:
        //keyboards inputs
        key_jump = gamepad_button_check_pressed(ID,gp_face1) || keyboard_check_pressed(vk_space); 
        key_jump_held = gamepad_button_check(ID,gp_face1) || keyboard_check(vk_space);
        move = gamepad_axis_value(ID,gp_axislh)*uncontrol 
        
        if keyboard_check(ord("D")){move = 1;}else{if keyboard_check(ord("Q")){move = -1;}}
        
        looking = gamepad_axis_value(ID,gp_axislv);
        if keyboard_check(ord("S")){looking = 1;}else{if keyboard_check(ord("Z")){looking = -1;}}
        
        attack = gamepad_button_check_pressed(ID,gp_face2) || device_mouse_check_button_pressed(ID,mb_left) ;
        pause = gamepad_button_check_pressed(ID,gp_start) || os_is_paused();
        debugbutton = gamepad_button_check_pressed(ID,gp_stickr) || keyboard_check_pressed(vk_f12);
        
        
        
        //Pause activation:
        if pause{
            if !instance_exists(object_pause){
                temp_pause = instance_create(view_xview[ID]+(view_wview[ID]/2),view_yview[ID]+(view_hview[ID]/2),object_pause);
                temp_pause.ID = ID;
                }
            }    
        
        //Debug things:
        //Activate debug infos:
        if debugbutton{
            debug += 1;
            if debug &gt; 2{debug = 0;}
            }
        
        //Move Shai 400 pixels upwards:
        if gamepad_button_check_pressed(ID,gp_stickl){y -= 400;}
        
        //WARNING ! DEBUG TOOLS ACTIVATED !
        if debug = 1{
                if keyboard_check_pressed(vk_up){ID+=1;}else{if keyboard_check_pressed(vk_down){ID-=1;}}
                }
            else{
                if debug = 2{
                    if keyboard_check_pressed(vk_up){
                        if keyboard_check(vk_shift){room_speed += 10;}else{room_speed ++;}
                        }
                    else{
                        if keyboard_check_pressed(vk_down){
                            if keyboard_check(vk_shift){room_speed -= 10;}else{room_speed -= 1;}
                            }
                        }
                    } 
                }
                       
        
        //Apply a deadzone on joysticks or stop the player if we're doing something:
        if (move &lt; 0.1 &amp;&amp; move &gt; -0.1){
            move =0;
            }
            else{
                if (next_right || next_left) &amp;&amp; (ontheground = false){
                move = 0;
                }
            else{
                if (STATUS = "crounching" || STATUS = "decrounching" || STATUS = "headshot" || STATUS = "divelanding" || STATUS = "jumpfromdive"){
                    move = 0
                    }
                }
            }
            
        //Define the acceleration ratio:
        if (sign(hsp)=1 &amp;&amp; sign(move)= -1 ) || (sign(hsp) = -1 &amp;&amp; sign(move) = 1){
            accelerate = sign(move);
            }
        else{
            if hsp &lt;= (move*3.99){
                accelerate =1;
                }
            else{
                if hsp &gt; (move*3.99){
                    accelerate = -1;
                    }
                }
            }
                
        //Add speed from inputs:
        if (abs(hsp) &lt;= 3.99){
            if (STATUS != "lookup" &amp;&amp; STATUS != "unlookup" &amp;&amp; STATUS != "crounching" &amp;&amp; STATUS != "decrounching" &amp;&amp; STATUS != "divejumping" ){
                if ontheground{
                    if move &gt; 0 || move &lt; 0{
                        if abs(hsp)+abs((movespeed/100)) &lt; abs(move*4){hsp += (movespeed/100)*accelerate;}
                        }
                    }
                else{
                    if move &gt; 0 || move &lt; 0{hsp += (movespeed/60)*accelerate;}
                    }
                }
            else{
                if (STATUS = "divejumping" &amp;&amp; ontheground = false){
                    if move &gt;0 || move &lt; 0{hsp += (movespeed/50)*accelerate;}
                    }
                }
            }
            
            
        //Friction hsp:
        if (sign(hsp) != sign(move)){
            if abs(hsp) &lt; frict {hsp = 0;}
            else{
                if hsp &gt; 0{hsp -= frict;}else{hsp += frict;}
                }
            }
        else{
            if (STATUS = "divejumping" &amp;&amp; ontheground){
                if abs(hsp) &lt; frict {hsp = 0;}
                else{
                    if hsp &gt; 0{hsp -= frict*4;}else{hsp += frict*4;}
                    }
                }
            }
                
        //Friction walljumppower as well as hsp:
        if abs(walljumppower) &lt; (frict/2){walljumppower = 0;}else{if walljumppower &gt; 0{walljumppower -= frict;}else{walljumppower += frict;}}
        
                
            
    
        //Apply GRAVITY ! (Now support super falling speed)
        if vsp &lt; 9{ vsp += grav; }
            
             
          
        //public static void hurt(String level):
        if !invicible {
            if hurted &gt; 0 || hurted &lt; 0 {
            image_speed = 0.4;
            hsp = hurted;
            vsp = -abs(hurted);
            hurted = 0 ;
            image_xscale = sign(hsp) * -1;
            STATUS = "hurt";
            }
        }
        
        
        //Jumping for ever !
        if key_jump &amp;&amp; STATUS != "hurt" &amp;&amp; STATUS != "spinattack" &amp;&amp; STATUS != "headshot" &amp;&amp; STATUS != "divejumping" &amp;&amp; STATUS != "lookup" {
            if STATUS = "crounching"{
                if jumpcount &lt; 2 &amp;&amp; Can_jump{
                    alarm_set(2,1);
                    alarm_set(1,15);
                    Can_jump = false;
                    jumpcount ++;
                    }
                }
            else{
                if !ontheground{
                    if next_left{
                        walljumppower = 4;
                        hsp = 2;
                        vsp = key_jump* -jumpspeed;
                        next_left = false;
                        STATUS = "double_jumping";
                        }
                    else{
                        if next_right{
                            walljumppower = -4;
                            hsp = -2;
                            vsp = key_jump* -jumpspeed;
                            next_right = false;
                            STATUS = "double_jumping";
                            }
                        else{
                            if jumpcount &lt; 2 &amp;&amp; Can_jump{
                                //no alarm_set(2,1); because of layered engine...
                                vsp = -jumpspeed;
                                alarm_set(1,15);
                                Can_jump = false;
                                jumpcount ++;
                                STATUS = "double_jumping";
                                }
                            }
                        }
                    }
                else{
                    if jumpcount &lt; 2 &amp;&amp; Can_jump {
                        if STATUS = "divelanding"{
                            if image_index &gt; 5 &amp;&amp; hsp+walljumppower = 0{
                                alarm_set(1,23);
                                alarm_set(2,26);
                                alarm_set(3,26);
                                Can_jump = false;
                                jumpcount ++;
                                STATUS = "jumpfromdive"
                                image_speed = 0.25;
                                }
                            }
                        else{
                            alarm_set(2,8);
                            alarm_set(1,15);
                            Can_jump = false;
                            jumpcount ++;
                            STATUS = "jumping"; 
                            image_index =0;
                            image_speed = 0.4;
                            }
                        }
                    }
                }
            }
            
        //Variable jump height:
        if (STATUS != "jumpfromdive" &amp;&amp; STATUS != "divejumping" &amp;&amp; STATUS != "hurt"){
            if vsp &lt; 0 &amp;&amp; !key_jump_held{
                vsp = max(vsp,-jumpspeed/2);
                }
            }
            
        //Shai can attack,(visual part):
        if attack &amp;&amp; attackcount = 0 &amp;&amp; !invicible &amp;&amp; STATUS != "jumpfromdive" &amp;&amp; STATUS != "divelanding" {
            if !ontheground{
                if next_right{
                    //Dive jump from a wall (right)
                    hsp = -4;
                    walljumppower = -4;
                    vsp = -jumpspeed;
                    STATUS = "divejumping";
                    image_xscale *= -1;
                    image_speed = 0.12;
                    }
                else{
                    if next_left{
                        //Dive jump from a wall (left)
                        hsp = 4;
                        walljumppower = 4;
                        vsp = -jumpspeed;
                        STATUS = "divejumping";
                        image_xscale *= -1;
                        image_speed = 0.12;
                        }
                    else{
                        if abs(move) &gt; 0.80 &amp;&amp; Can_jump &amp;&amp; sign(move) = sign(image_xscale){ 
                            //Dive jump from the skyyyyyyyyy !
                            hsp += 1.5*sign(move);
                            walljumppower += sign(move);
                            vsp = -jumpspeed;
                            attackcount ++;
                            STATUS = "divejumping";
                            alarm_set(1,15);
                            Can_jump = false;
                            image_speed = 0.12;
                            }
                            else{
                                //Do the star attack:
                                attackcount ++;
                                alarm_set(0,30);
                                STATUS = "spinattack";
                                }
                            }
                        }
                    }
                else{
                    if abs(move) &gt; 0.84 &amp;&amp; Can_jump{
                        //Dive jump from the ground
                        alarm_set(1,15);
                        hsp += 4*sign(move);
                        walljumppower += 2*sign(move);
                        vsp = -jumpspeed;
                        attackcount ++;
                        STATUS = "divejumping";
                        Can_jump = false;
                        image_speed = 0.12;
                        }
                    else{
                        //Kick with your head !
                        if STATUS != "headshot"{
                            STATUS = "headshot";
                            waiting = 0;
                            attackcount ++;
                            image_speed = 0.4;
                            }
                        }
                    }
                }
                
                
        //Collisions:
        //Vertical collision (using while statements, be very careful with them)
        if (!place_meeting(x,y+(vsp),object_wall)){
            if (!place_meeting(x,y+sign(vsp),object_wall)){
                y += vsp;
                }
            else{
                vsp = 0;
                }
            }
        else{
            while (!place_meeting(x,y+sign(vsp),object_wall)){
                y += sign(vsp);
                }
            if place_meeting(x,y+sign(vsp),object_wall){
                vsp = 0;
                }
            }
        
        
        //horizontal collision (partial support of slopes, don't support high values):
        if (!place_meeting(x+(hsp+walljumppower+hsp_carry),y,object_wall)){
            if (!place_meeting(x+sign(hsp+walljumppower),y,object_wall)){
                x += (hsp+walljumppower+hsp_carry);
                }
            else{
                hsp = 0;
                hsp_carry = 0;
                walljumppower =0;
                }
            }
        else{
            if ontheground{
                yrealplus = 3;
                while(place_meeting(x+(hsp+walljumppower),y-yrealplus,object_wall) &amp;&amp; yrealplus &lt; 10){
                    yrealplus += 1;
                    }
                if (place_meeting(x+(hsp+walljumppower),y-yplus,object_wall)){
                    if (!place_meeting(x+sign(hsp+walljumppower),y-yplus,object_wall)){
                        x += sign(hsp +walljumppower+hsp_carry);
                        }
                    else{
                        hsp = 0;
                        hsp_carry = 0;
                        walljumppower = 0;
                        }
                    }
                else{
                    x += (hsp+walljumppower);
                    y -= yrealplus;
                    }
                }
            else{
                if (!place_meeting(x+sign(hsp+walljumppower),y,object_wall)){
                    x += sign(hsp+walljumppower);
                    }
                else{
                    hsp = 0;
                    hsp_carry = 0;
                    walljumppower =0;
                    }
                }
            }    

        //If Shai finish stuck into a wall, please add a correction or change the physics.
        //Correction added 'cause of a collision bug:
        //Horizontal correction:
        if place_meeting(x,y,object_wall){if next_right = true &amp;&amp; next_left != true{x -=1;}else{if next_right != true &amp;&amp; next_left = true{x +=1;}}}
        
        //Vertical correction (lightee than th last time):
        //if next_bottom || next_top{y = yprevious;}
        
        
        //ANIMATION !
        //Direction (image_xscale) part:
        if STATUS != "hurt" &amp;&amp; STATUS != "divejumping" &amp;&amp; STATUS != "divelanding" &amp;&amp; STATUS != "jumpfromdive" &amp;&amp; STATUS != "spinattack" &amp;&amp; STATUS != "headshot" &amp;&amp; STATUS != "landing" &amp;&amp; STATUS != "pre_landing" /*&amp;&amp; STATUS != "jumping" &amp;&amp; STATUS != "double_jumping"*/{
            if STATUS = "walljump"{
                if next_left{image_xscale = -1;}else{if next_right{image_xscale = 1;}}
                }
            else{
                if abs(hsp) &gt; 0.1{image_xscale = sign(hsp);}else{if hsp = 0 &amp;&amp; abs(move) != 0{image_xscale = sign(move);}}   
                }
            }
         
        //STATUS part:
        if STATUS != "hurt"{
            if STATUS != "spinattack"{
                if STATUS != "jumping" &amp;&amp; STATUS != "double_jumping"{
                    if STATUS != "divejumping" &amp;&amp; STATUS != "divefall"{
                        if STATUS != "jumpfromdive" &amp;&amp; STATUS != "headshot" &amp;&amp; STATUS !="divelanding"{
                            if place_meeting(x,y+yrealplus,object_wall){  //Si l'on est au sol
                                if hsp = 0{ //Si l'on est immobile 
                                    if looking &lt; -0.90{
                                        STATUS = "lookup";
                                        image_speed = 0.025
                                        }
                                    else{
                                        if STATUS = "lookup"{
                                            STATUS = "unlookup";
                                            image_speed = 0.05;
                                            }
                                        else{
                                            if looking &gt; 0.90{
                                                STATUS = "crounching";
                                                image_speed = 0.2;
                                                }
                                            else{
                                                if STATUS = "crounching"{
                                                    STATUS = "decrounching";
                                                    image_speed = 0.1;
                                                    }
                                                else{
                                                    if abs(move) !=0{
                                                        STATUS = "pushing";
                                                        image_speed = abs(move)/5;
                                                        }
                                                    else{
                                                        if collision_line(x,y,x+(10*image_xscale),y+40,object_wall,false,true) = noone{
                                                            STATUS = "ledge";
                                                            image_speed = 0.15;
                                                            }
                                                        else{
                                                            if uncontrol = -1{
                                                                STATUS = "rotating";
                                                                image_speed = 0.22;
                                                                }
                                                            else{
                                                                if waiting &gt; 5{
                                                                    //Do waiting things, like masturbating.
                                                                    if (waiting &gt; 5 &amp;&amp; waiting &lt; 5.1) || (waiting &gt; 10 &amp;&amp; waiting &lt; 10.1){
                                                                        STATUS = "waiting";
                                                                        }
                                                                    else{
                                                                        if (waiting &gt; 15 &amp;&amp; waiting &lt; 15.1){
                                                                            STATUS = "waiting_phase_2";
                                                                            }
                                                                        else{
                                                                            if waiting &gt; 25{
                                                                                STATUS = "waiting_phase_3";
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                else{
                                                                    if bossfight{
                                                                        STATUS = "idle_bossfight";
                                                                        image_speed = 0.033;
                                                                        }
                                                                    else{
                                                                        STATUS = "idle";
                                                                        image_speed = 0.1;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                else{ //Si l'on est pas immobile...
                                    if (sign(move) = 1 &amp;&amp; sign(hsp) = -1) || (sign(move) = -1 &amp;&amp; sign(hsp) = 1){
                                        STATUS = "stopping";
                                        }
                                    else{
                                        if abs(hsp) &gt; 3.4{
                                            STATUS = "running";
                                            image_speed = abs(hsp)/16
                                            }
                                        else{
                                            STATUS = "walking";
                                            image_speed = abs(hsp)/32
                                            }
                                        }
                                    }
                                }
                            else{ //Si on est en l'air.
                                if STATUS != "crounching"{
                                    if place_meeting(x-1,y,object_wall) || place_meeting(x+1,y,object_wall){
                                        STATUS = "walljump";
                                        }
                                    else{
                                        if vsp &gt; 1{
                                            STATUS = "landing";
                                            if image_index &gt;= 0 &amp;&amp; image_index &lt;= 2{
                                                image_speed = 0.5;
                                                }
                                            else{
                                                if move*image_xscale &gt; 0{
                                                    image_index = 3;
                                                    }
                                                else{
                                                    if move*image_xscale &lt; 0{
                                                        image_index = 4;
                                                        }
                                                    else{
                                                        image_index = 2;
                                                        }
                                                    }
                                                }
                                            }
                                        else{
                                            if abs(vsp) &lt;= 1{
                                                STATUS = "pre_landing";
                                                image_speed = 0.5;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    else{
                        if ontheground{
                            STATUS = "divelanding"; //Change d'animation lorsque l'on touche le sol avec le dive jump.
                            }
                        else{
                            if place_meeting(x+image_xscale,y,object_wall){
                                hurted = (hsp+walljumppower)*-1;
                                }
                            } 
                        }
                    }
                else{
                if !ontheground{
                    if place_meeting(x-1,y,object_wall) || place_meeting(x+1,y,object_wall){
                        STATUS = "walljump";
                        }
                    else{
                        if vsp &gt; 1{
                            STATUS = "landing";
                            if image_index &gt;= 0 &amp;&amp; image_index &lt;= 2{
                                image_speed =0.5;
                                }
                            else{
                                if move*image_xscale &gt; 0{
                                    image_index = 3;
                                    image_speed = 0;
                                    }
                                else{
                                    if move*image_xscale &lt; 0{
                                        image_index = 4;
                                        image_speed = 0;
                                        }
                                    else{
                                        image_index = 2;
                                        image_speed = 0;
                                        }
                                    }
                                }
                            }
                        else{
                            if abs(vsp) &lt;= 1{
                                STATUS = "pre_landing";
                                image_speed = 0.5;
                                }
                            }
                        } 
                    }
                }
            }
        else{
            if ontheground{STATUS = "idle";}
            }
        }
    else{
        if ontheground{
            if abs(hsp) &gt; 3.4{
                STATUS = "running";
                }
            else{
                if abs(hsp) &lt;= 3.4{
                    STATUS = "walking";
                    }
                else{
                    if bossfight{STATUS = "idle_bossfight";}
                    else{STATUS = "idle";}
                    }
                }
            }
        }
         
        
                                                    
                                            
                            
                        
                    
        
        
        //The one ligne animator:
        sprite_index = asset_get_index("sprite_"+STATUS);
        
        
        //Increment waiting time:
        if x = xprevious &amp;&amp; y = yprevious{waiting += 0.012;}else{waiting = 0;}
        
        
        //angle for dive jumping:
        if STATUS = "divejumping" &amp;&amp; vsp &gt; 0{
            if image_angle &lt; 45 &amp;&amp; image_xscale = -1{
                image_angle ++;
                }
            else{
                if image_angle &gt; -45 &amp;&amp; image_xscale = 1{
                    image_angle --;
                    }
                }
            if abs(image_angle) = 45{
                STATUS = "divefall";
                image_angle = 0;
                }
            }
        else{
            image_angle = 0;
            }
        
               
                       
        }
    }
else{
    image_index -= image_speed;
    }                          
                            
                    
             
                
                                    
                                    
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera

//Follow xplayerposition
x=ceil(x);
object_camera.x = x;

//rounding player vertical position
y = round(y);

//Then, follow yplayerposition.
if sprite_index = sprite_crounching &amp;&amp; sprite_index &gt; 2
    {
    if object_camera.y - y &lt; 50
        {
        if point_distance(object_camera.x,object_camera.y,object_camera.x,y+50) &gt;= 3
            {
            object_camera.y += 3;
            }
        else
            {
            object_camera.y += point_distance(object_camera.x,object_camera.y,object_camera.x,y+50);
            }
        }
    else
        {
        if point_distance(object_camera.x,object_camera.y,object_camera.x,y+50) &gt;=3
            {
            object_camera.y -=3;
            }
        else
            {
            object_camera.y -= point_distance(object_camera.x,object_camera.y,object_camera.x,y+50);
            }
        }
    }
else
    {
    if sprite_index = sprite_decrounching
        {
        if object_camera.y - y &gt; 0
            {
            if point_distance(object_camera.x,object_camera.y,object_camera.x,y) &gt;= 3
                {
                object_camera.y -=3;
                }
            else
                {
                object_camera.y -= point_distance(object_camera.x,object_camera.y,object_camera.x,y);
                }
            }
        }
    else
        {
        if sprite_index = sprite_lookup &amp;&amp; sprite_index &gt; 1
            {
            if instance_exists(object_fond_shop)
                {
                object_camera.y = y-100;
                }
            else
                {
                if object_camera.y - y &gt; -50
                    {
                    if point_distance(object_camera.x,object_camera.y,object_camera.x,y-50) &gt;= 3
                        {
                        object_camera.y -= 3;
                        }
                    else
                        {
                        object_camera.y -= point_distance(object_camera.x,object_camera.y,object_camera.x,y-50);
                        }
                    }
                else
                    {
                    if point_distance(object_camera.x,object_camera.y,object_camera.x,y-50) &gt;= 3
                        {    
                        object_camera.y += 3;
                        }
                    else
                        {
                        object_camera.y += point_distance(object_camera.x,object_camera.y,object_camera.x,y-50);
                        }
                    }
                }
            }
        else
            {
            if sprite_index = sprite_unlookup
                {
                if object_camera.y - y &lt; 0
                    {
                    if point_distance(object_camera.x,object_camera.y,object_camera.x,y) &gt;= 3
                        {
                        object_camera.y += 3;
                        }
                    else
                        {
                        object_camera.y += point_distance(object_camera.x,object_camera.y,object_camera.x,y);
                        }
                    }
                }
            else
                {
                if point_distance(object_camera.x,object_camera.y,object_camera.x,y) &gt;= 10
                    {
                    object_camera.y += sign(y-object_camera.y)*11;
                    }
                else
                    {
                    object_camera.y += sign(y-object_camera.y)*point_distance(object_camera.x,object_camera.y,object_camera.x,y);
                    }
                }
            }
        }
    }


object_camera.x = ceil(x);
object_camera.y = round(object_camera.y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parallax backgrounds
if is_array(global.backgrounds){
    if background_visible[0]{
        //background_x[0] = round(view_xview[0]/global.backgrounds[0,0]);
        background_x[0] = ceil(ceil(view_xview[0])/global.backgrounds[0,0]+global.backgrounds[0,7]);
        background_y[0] = ceil((view_yview[0]/global.backgrounds[0,1]+global.backgrounds[0,6]));
        }
    if background_visible[1]{
        //background_x[0] = round(view_xview[0]/global.backgrounds[0,0]);
        background_x[1] = ceil(ceil(view_xview[0])/global.backgrounds[1,0]+global.backgrounds[1,7]);
        background_y[1] = ceil((view_yview[0]/global.backgrounds[1,1]+global.backgrounds[1,6]));
        }
    if background_visible[2]{
        //background_x[0] = round(view_xview[0]/global.backgrounds[0,0]);
        background_x[2] = ceil(ceil(view_xview[0])/global.backgrounds[2,0]+global.backgrounds[2,7]);
        background_y[2] = ceil((view_yview[0]/global.backgrounds[2,1]+global.backgrounds[2,6]));
        }
    if background_visible[3]{
        //background_x[0] = round(view_xview[0]/global.backgrounds[0,0]);
        background_x[3] = ceil(ceil(view_xview[0])/global.backgrounds[3,0]+global.backgrounds[3,7]);
        background_y[3] = ceil((view_yview[0]/global.backgrounds[3,1]+global.backgrounds[3,6]));
        }
    if background_visible[4]{
        //background_x[0] = round(view_xview[0]/global.backgrounds[0,0]);
        background_x[4] = ceil(ceil(view_xview[0])/global.backgrounds[4,0]+global.backgrounds[4,7]);
        background_y[4] = ceil((view_yview[0]/global.backgrounds[4,1]+global.backgrounds[4,6]));
        }
    if background_visible[5]{
        //background_x[0] = round(view_xview[0]/global.backgrounds[0,0]);
        background_x[5] = ceil(ceil(view_xview[0])/global.backgrounds[5,0]+global.backgrounds[5,7]);
        background_y[5] = ceil((view_yview[0]/global.backgrounds[5,1]+global.backgrounds[5,6]));
        }
    if background_visible[6]{
        //background_x[0] = round(view_xview[0]/global.backgrounds[0,0]);
        background_x[6] = ceil(ceil(view_xview[0])/global.backgrounds[6,0]+global.backgrounds[6,7]);
        background_y[6] = ceil((view_yview[0]/global.backgrounds[6,1]+global.backgrounds[6,6]));
        }
    if background_visible[7]{
        //background_x[0] = round(view_xview[0]/global.backgrounds[0,0]);
        background_x[7] = ceil(ceil(view_xview[0])/global.backgrounds[7,0]+global.backgrounds[7,7]);
        background_y[7] = ceil((view_yview[0]/global.backgrounds[7,1]+global.backgrounds[7,6]));
        }  
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle all animations who don't need to loop:
if STATUS = "waiting" || STATUS = "waiting" || STATUS = "decrounching" || STATUS = "unlookup" ||STATUS = "headshot"{
    STATUS = "idle";
    }
else{
    if STATUS = "jumpfromdive"{
        STATUS = "jumping";
        image_index = 2;
        }
    else{
        if STATUS = "divejumping"{
            image_index = 2;
            }
        else{
            if STATUS = "crounching"{
                image_index = 2;
                }
            else{
                if STATUS = "divelanding"{
                    image_index = 5;
                    }
                else{
                    if STATUS = "waiting_phase_2"{
                        image_index = 2;
                        }
                    else{
                        if STATUS = "jumping"{
                            image_index = 8;
                            }
                        else{
                            if STATUS = "pre_landing"{
                                image_index =  2;   
                                }
                            else{
                                if STATUS = "startpushing"{
                                    STATUS = "pushing";
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
            
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Old animation handling:
/*if sprite_index = sprite_headshot || sprite_index = sprite_waiting
    {
    sprite_index = sprite_idle;
    }
else
    {
    if sprite_index = sprite_jumpfromdive
        {
        sprite_index = sprite_jumping;
        }
    else
        {
        if sprite_index = sprite_divejumping
            {
            image_index = 2;
            }
        else
            {
            if sprite_index = sprite_crounching
                {
                image_index = 2;
                }
            else
                {
                if sprite_index = sprite_lookup
                    {
                    image_index = 1;
                    }
                else
                    {
                    if (sprite_index = sprite_decrounching || sprite_index = sprite_unlookup)
                        {
                        sprite_index =sprite_idle;
                        }
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
