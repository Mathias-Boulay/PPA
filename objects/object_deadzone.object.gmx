<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_deadzone</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise everything:
//basic font:
global.font_normal = font_add_sprite_ext(sprite_font_normal,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ áàâäçéèêëíìîïóòôöúùûü':&lt;&gt;()!?;.-,0123456789",true,1);
global.font_title = font_add_sprite_ext(sprite_font_title,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789* |▯áàâäéèêëíìîïóòôöúùûü",true,1);
global.font_big_title = font_add_sprite_ext(sprite_font_big_title,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 12345",true,1);
global.font_short = font_add_sprite_ext(sprite_font_short,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/: ",true,1);
global.font_normal_condensed = font_add_sprite_ext(sprite_font_normal,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ áàâäçéèêëíìîïóòôöúùûü':&lt;&gt;()!?;.-,",true,0);

//First launch ? 
//Create directories:
if !directory_exists(working_directory + "\saves"){
    directory_create(working_directory + "\saves");
    }
if !directory_exists(working_directory + "\settings"){
    directory_create(working_directory + "\settings");
    }
if !directory_exists(working_directory + "\levels"){
    directory_create(working_directory + "\levels");
    }
if !directory_exists(working_directory + "\screenshots"){
    directory_create(working_directory + "\screenshots");
    }
if !directory_exists(working_directory +"\levels-pics"){
    directory_create(working_directory+ "\levels-pics");
    }

//Create default settings file:
if !file_exists(working_directory + "\settings\settings.ini"){
    ini_open(working_directory + "\settings\settings.ini");
    //video section:
    ini_write_string("video","fullscreen","false");
    ini_write_real("video","window_size",2);
    ini_write_real("video","quality",2);
    
    //Sound section:
    ini_write_real("sounds","music_volume",4);
    ini_write_real("sounds","sfx_volume",5);
    
    //Langage section:
    ini_write_string("langage","selected_langage","franglish");
    
    //Vibration ?
    ini_write_string("controls","vibrate","on");
    
    
    //Controls section:
    //Doesn't work yet.
    //équivalent stick gauche
    ini_write_real("controls","left",ord("Q"));
    ini_write_real("controls","right",ord("D"));
    ini_write_real("controls","up",ord("Z"));
    ini_write_real("controls","down",ord("S"));
    //Boutons de la manette
    ini_write_real("controls","face1",32); //Touche espace
    ini_write_real("controls","face2",27); //Touche échap
    ini_write_real("controls","face3",ord("T"));
    ini_write_real("controls","face4",ord("U"));
    
    ini_write_real("controls","start",ord("P"));
    //ini_write_real("controls","select",);
    ini_write_real("controls","shoulderr",ord("E"));
    ini_write_real("controls","shoulderl",ord("A"));
    
    ini_close();
    }

//PURIFIER LES HÉRÉTIQUES !
if file_exists(working_directory+"logs/last_logs.txt"){
    file_delete(working_directory+"logs/last_logs.txt");
    }
if file_exists(working_directory+"logs/last_errors.txt"){
    file_delete(working_directory+"logs/last_errors.txt");
    }
if file_exists(working_directory+"logs/last_warnings_and_errors.txt"){
    file_delete(working_directory+"logs/last_warnings_and_errors.txt");
    }



//Load the settings:
script_settings_load();

room_goto_next();




    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fin de la vibration: arrêtez tout !
gamepad_set_vibration(vibrate[0],0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window
if room = room_pre_title {window_center();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inputs globalisé sous formes de variables.
//Les inputs sont bloqués si l'objet fade existe.
if !instance_exists(object_fade){
    if !instance_exists(object_fade) &amp;&amp; !instance_exists(object_respawn){
        for(i=0;i&lt;1;i++){
            //Version courte: juste lorsque les boutons viennent d'être pressés
            global.face1[i]=gamepad_button_check_pressed(i,gp_face1);
            global.face2[i]=gamepad_button_check_pressed(i,gp_face2);
            global.face3[i]=gamepad_button_check_pressed(i,gp_face3);
            global.face4[i]=gamepad_button_check_pressed(i,gp_face4);
            global.start[i]=gamepad_button_check_pressed(i,gp_start);
            global.select[i]=gamepad_button_check_pressed(i,gp_select);
            global.shoulderl[i]=gamepad_button_check_pressed(i,gp_shoulderl);
            global.shoulderr[i]=gamepad_button_check_pressed(i,gp_shoulderr);
            //Appui sur les joysticks:
            global.stickr[i]= gamepad_button_check_pressed(i,gp_stickr);
            global.stickl[i]= gamepad_button_check_pressed(i,gp_stickl);
            
            //Version longue: tant que les boutons sont pressés:
            global.face1_long[i]=gamepad_button_check(i,gp_face1);
            global.face2_long[i]=gamepad_button_check(i,gp_face2);
            
            //joysticks:
            global.axislh[i]=gamepad_axis_value(i,gp_axislh);
            global.axislv[i]=gamepad_axis_value(i,gp_axislv);
            global.axisrh[i]=gamepad_axis_value(i,gp_axisrh);
            global.axisrv[i]=gamepad_axis_value(i,gp_axisrv);
            //Mapper la croix directionnelle sur le joystick gauche:
            if gamepad_button_check(i,gp_padl){ global.axislh[i] = clamp(global.axislh[i]-1,-1,0);}
            if gamepad_button_check(i,gp_padr){ global.axislh[i] = clamp(global.axislh[i]+1,0,1);}
            if gamepad_button_check(i,gp_padu){ global.axislv[i] = clamp(global.axislh[i]-1,-1,0);}
            if gamepad_button_check(i,gp_padd){ global.axislv[i] = clamp(global.axislh[i]+1,0,1);}
            
            
            //Okay maintenant faut que l'on fasse le clavier.
            if keyboard_check_pressed(global.keyboard_face1){global.face1[i]=min(global.face1[i]+1,1);}
            if keyboard_check_pressed(global.keyboard_face2){global.face2[i]=min(global.face2[i]+1,1);}
            if keyboard_check_pressed(global.keyboard_face3){global.face3[i]=min(global.face3[i]+1,1);}
            if keyboard_check_pressed(global.keyboard_face4){global.face4[i]=min(global.face4[i]+1,1);}
            
            if keyboard_check(global.keyboard_face1){global.face1_long[i]=min(global.face1_long[i]+1,1);}
            
            if keyboard_check_pressed(global.keyboard_shoulderr){global.shoulderr[i]=min(global.shoulderr[i]+1,1);}
            if keyboard_check_pressed(global.keyboard_shoulderl){global.shoulderl[i]=min(global.shoulderl[i]+1,1);}
            if keyboard_check_pressed(global.keyboard_start){global.start[i]=min(global.start[i]+1,1);}
            
            if keyboard_check(global.keyboard_up){global.axislv[i]=clamp(global.axislv[i]-1,-1,0);}
            if keyboard_check(global.keyboard_down){global.axislv[i]=clamp(global.axislv[i]+1,0,1);}
            if keyboard_check(global.keyboard_left){global.axislh[i]=clamp(global.axislh[i]-1,-1,0);}
            if keyboard_check(global.keyboard_right){global.axislh[i]=clamp(global.axislh[i]+1,0,1);}
            
            
            
            
            
            }
        }
    }
else{ //Reset les valeurs:
    for(i=0;i&lt;1;i++){
        //Version courte
        global.face1[i]=false;
        global.face2[i]=false;
        global.face3[i]=false;
        global.face4[i]=false;
        global.start[i]=false;
        global.select[i]=false;
        global.shoulderr[i]=false;
        global.shoulderl[i]=false;
        //Appui sur les joysticks
        global.stickr[i]=false;
        global.stickl[i]=false;
        
        //Version longue: tant que les boutons sont pressés
        global.face1_long[i]=false;
        global.face2_long[i]=false;
        
        //Joysticks
        global.axislh[i]=0;
        global.axislv[i]=0;
        global.axisrh[i]=0;
        global.axisrv[i]=0;
        
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screenshots event + book check:
if keyboard_check_pressed(vk_f2){
    screen_save(working_directory + "\screenshots\screenshot-"+string(current_day)+"_"+string(current_month)+"_"+string(current_year)+"-"+string(current_hour)+"_"+string(current_minute)+"_"+string(current_second)+".png");
    }
    
//Then let the game live !
if room = room_title{
    if !instance_exists(object_white_book){
        instance_create(view_xview[0]+(view_wview[0]/2)-(sprite_get_width(sprite_white_book)/2),view_yview[0]+(view_hview[0]/2)-(sprite_get_height(sprite_white_book)/2),object_white_book);
        if variable_global_exists("SELECTED_SAVE"){
            object_white_book.STATUS="TITLE";
            }
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_axis_deadzone(0,0.2);
gamepad_set_axis_deadzone(1,0.2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
