<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///----------VARIABLES DEFINIES----------:
hsp=0;
hsp_carry=0;
speed_up=0;
vsp=0;
walljumppower=0;
uncontrol=1;
looking=0;
jumpcount=0;
triplejumptampon=0;
divejumpcount=0;
attackcount=0;
invincible=false;
waiting=0;
yplus=10;
hurt=0;
accelerate=0;
Can_jump=true;
places_left=6;
STATUS="idle";
debug=0;
next_left=0;
next_right=0;
ID=(instance_number(object_player)-1);
temp_jump = false;
UIBusy = false;

//Valeur minimale appliqué sur le mur lorsque l'on est sur le mur.
slipperywall= -max(((global.grav*2.1)/0.4),1.1);

//Maximum de pixel théoriques (-10%) pour l'activation du walljump.
maxjumpheight=0;
for(i=0;i&gt; -1;i++){
    maxtemp=global.jumpspeed-(global.grav*i);
    if maxtemp &gt; abs(slipperywall){
        maxjumpheight+=maxtemp;
        }
    else{
        i= -10;
        maxjumpheight*=0.60;
        }   
    }




//Vibrate frames.
walking_frames[0]=5;
walking_frames[1]=6;
walking_frames[2]=13;
walking_frames[3]=14;

running_frames[0]=7;
running_frames[1]=8;
running_frames[2]=9;
running_frames[3]=19;
running_frames[4]=20;
running_frames[5]=21;

headshot_frames[0]=5;

jump_frames[0]=1;

crawling_frames[0]=2;
crawling_frames[1]=5;
crawling_frames[2]=6;

/*
vibrate=false;
sacade=2;
alarm_set(6,sacade);
*/


ini_close();
ini_open(global.SELECTED_SAVE);
goodness = ini_read_real("Data",string(ID+1)+"-goodness",50);
rionys = ini_read_real("Data",string(ID+1)+"-rionys",0);
image_speed = 0.1;
image_index_previous=image_index;


life=ini_read_real("Data",string(ID+1)+"-life",1);
heart[1]=instance_create(view_xview[0]+7,view_yview[0]+47,object_heart);
heart[2] = instance_create(view_xview[0]+20,view_yview[0]+47,object_heart);
heart[3] = instance_create(view_xview[0]+33,view_yview[0]+47,object_heart);
heart[1].state = ini_read_string("Data",string(ID+1)+"-heart_1","basic");
heart[2].state = ini_read_string("Data",string(ID+1)+"-heart_2","basic");
heart[3].state = ini_read_string("Data",string(ID+1)+"-heart_3","basic");


//Adding hud
instance_create(x,y,object_hud);
instance_create(x,y,object_camera);


ini_close();
if room!=room_Test_room{
    ini_open(global.selected_level);
    }
//Debug:
instance_create(x,y,object_debug);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shai peut re-sauter !
Can_jump = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset attackcount:
attackcount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Donc là faut créer le bras en dehors de l'écran.
instance_create(x+17,view_yview[0]+view_hport[0]+35,object_death_arm);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On reprend des contrôles normaux.
uncontrol = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invoque l'objet chargé de faire le respawn
instance_create(x,y,object_respawn);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On redonne la possibilité de vibrer !
//Aucun droit de connotation sexuelle, merci par avance.
if vibrate{vibrate=false;}else{vibrate=true;}
alarm_set(6,sacade);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Effectuer un saut tout à fait classique:
if place_meeting(x,y+1,object_wall){
    vsp = -global.jumpspeed;
    jumpcount ++;
    Can_jump = false;
    alarm_set(11,15);

/*if STATUS= "running"{                 
    triplejumptampon++;      
    }*/ 
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>life</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>3</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de vérification de pause/vendeur:
if !instance_exists(object_pause){
    UIBusy = 0;
    if STATUS = "lookup" &amp;&amp; place_meeting(x,y,object_seller){
        UIBusy = 1;
        if global.face2[0]{
            STATUS = "unlookup";
            image_index = 0;
            image_speed = 0.06;
            UIBusy = 0;
            }
        }
    }
else{
    //On freeze le sprite du joueur ainsi que ses alarmes.
    alarm[0] ++;
    alarm[8] ++;
    alarm[10]++;
    alarm[11]++;
    image_index -= image_speed;
    UIBusy = 1;
    }
    
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>UIBusy</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>On balance le reste des modules</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///----------ATTACKCOUNT/UNCONTROL----------  
  
//Réinitialiser le compteur d'attaque:
if place_meeting(x,y+1,object_wall){attackcount = 0;}

//Gérer le uncontroll:
if place_meeting(x,y+1,object_uncontrol_platform){
    uncontrol = -1;
    }
else{
    if uncontrol = -1 {
        if alarm_get(8) = -1{
            alarm_set(8,60);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de récupération d'entrées (+debug colisions):
//Débug:
//next_right = place_meeting(x+2,y,object_wall);
//next_left = place_meeting(x-2,y,object_wall);

//On prend les instructions du joueur:
key_jump = global.face1[ID];
key_jump_held = global.face1_long[ID];
move = global.axislh[ID]*uncontrol;
looking = global.axislv[ID]; 
attack = global.face2[ID];
pause = global.start[ID] /* || os_is_paused()*/;
debugbutton = global.stickl[ID];

if room=room_Test_room{
    if global.start[ID]{
        script_fade_status("room_title","OPTIONS-MAPPING");
        pause=0;
        }
    
    }
//Appliquer une marge de detection car certaines manettes ne sont pas terriblements fonctionnelles:
//Ou alors si le joueur effectue une action particulière.
if abs(move) &lt; 0.1{
    move =0;
    }
else{
    if STATUS = "hurt"{
        move=0;
        }
    else{
        if !place_meeting(x,y+1,object_wall){
            if place_meeting(x+1,y,object_wall){
                move = 0;
                }
            else{
                if place_meeting(x-1,y,object_wall){
                    move = 0;
                    }
                }
            }
        else{
            switch(STATUS){
                case "precrawl":
                case "decrounching":
                case "headshot":
                case "divelanding":
                case "jumpfromdive":
                case "rolling": 
                    move = 0;
                    break;
                
                case "divejumping":
                    if sign(move) != sign(image_xscale){
                         move=0;
                        } 
                    break;
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module d'activation de pause:
//Si demandé, on active la pause:
if pause{
    if !instance_exists(object_pause){
        if !instance_exists(object_start_overlay_1){
            if !instance_exists(object_start_overlay_2){
                instance_create(view_xview[0]+(view_wview[0]/2),view_yview[0]+view_hview[0]+85,object_pause);
                }
            }
        }
    else{
        show_debug_message("Nombre d'instances actives: "+string(instance_number(object_pause)));
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module du coefficient d'acceleration:
//Nouvelle version du module:
if sign(hsp) = -sign(move){
    accelerate= sign(move);
    }
else{
    if STATUS = "crawling" ||STATUS = "crawlidle"{
        accelerate= -sign(hsp-move);
        }
    else{
        if sign(hsp-(move*4.2)) != 0{   
            accelerate= -sign(hsp-(move*4.2));
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de gestion de la vitesse du joueur:
//Nouvelle version du module: plus propre comme d'hab.
if abs(hsp) &lt;= 4.20 &amp;&amp; STATUS != "lookup" &amp;&amp; STATUS != "unlookup" {
    //Vitesse minimale dans les deux sens
    if abs(move) != 0 &amp;&amp; abs(hsp) &lt; 1{hsp =sign(move)+(sign(move)*global.grav);}
    //On utilise une variable temporaire pour stocker la vitesse supplémentaire à donner.
    switch(STATUS){ //On vérifie notre état:
        case "divejumping":
            if place_meeting(x,y+1,object_wall){//Vérifie si l'on est au sol:
                speed_up=global.movespeed/50;
                }
            break;
            
        default: //Pas de cas spécifique:
            if place_meeting(x,y+1,object_wall){//Vérifie que l'on est au sol
                speed_up= global.movespeed/100;
                }
            else{
                speed_up=global.movespeed/60;
                }
            break;
        }
    }

//On ajoute la vitesse: dans la cas du crawl,la vitesse doit être fixe.
if STATUS != "crawling" {
    if STATUS != "divejumping"{
        hsp += speed_up*accelerate;
        }
    }
    
//Limitation de vitesse spécifique à certains états:
switch(STATUS){
    case "crawling":
        hsp=clamp(hsp,-1-global.grav,1+global.grav);
        break;
    
    case "divejumping":
        if sign(hsp) != sign(image_xscale){
            hsp=0;
            }
        break;
    
    }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de gestion des frictions/gravité:
//Accelérer c'est bien beau mais faut freiner aussi, avec la friction ! :
if STATUS != "rolling"{
    if sign(hsp) != sign(move){
        hsp = max(0,abs(hsp)-global.frict)*sign(hsp);
        }
    else{
        if STATUS = "divejumping"{
            if place_meeting(x,y+1,object_wall){
                hsp = max(0,abs(hsp)-global.frict*2.5)*sign(hsp);
                }
            }
        }
    }
else{
    if image_index &gt; 11{
        hsp = max(0,abs(hsp)-global.frict*2.5)*sign(hsp);
        }
    }
//Ajout de friction si l'on possède de la propulsion depuis un mur:
walljumppower = max(0,abs(walljumppower)-global.frict)*sign(walljumppower);

//Pareil mais pour hsp carry
hsp_carry = max(0,abs(hsp_carry)-global.frict/2)*sign(hsp_carry);

//Et voici la gravité !
if STATUS = "walljump"{ 
    vsp += sign(6-vsp)*(global.grav/2);
    }
else{
    vsp += sign(9-vsp)*global.grav;
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de prise de dommages:
//Réagir lorsque un obstacle vous inflige des dommages:
if abs(hurt) != 0{
    image_speed = 0.4;
    hsp = 2*hurt;
    vsp = -abs(hurt/2);
    hurt= 0;
    image_xscale = sign(hsp) * -1;
    STATUS = "hurt" //Changement de status mais le seul moyen de faire un débug de collision maintenant serait de changer le sprite avant l'heure.
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///----------SAUTER----------
//Avec ce code, Shai pourra sauter !
if key_jump{
    if !place_meeting(x,y-5,object_wall){ //On empêche de sauter dans les endroits exigus.
        if STATUS != "rolling"{
            if STATUS != "precrawl"{
                if STATUS != "hurt"{
                    if STATUS != "spinattack"{
                        if STATUS != "headshot"{
                            if STATUS != "divejumping"{
                                //if STATUS != "lookup"{
                                    if STATUS = "crawling" || STATUS = "crawlidle"{
                                        if place_meeting(x,y+1,object_wall){
                                            if !place_meeting(x,y-12,object_wall){
                                                //Jump while being crounched:
                                                STATUS = "jumpfromdive";
                                                alarm_set(0,10);
                                                image_speed = 0.5;
                                                image_index = 0;
                                                }
                                            }
                                        }
                                    else{
                                        if !place_meeting(x,y+1,object_wall){ //Si vous n'êtes pas sur le sol
                                            if place_meeting(x-max(1,abs(hsp)),y,object_wall){
                                                if STATUS = "walljump"{
                                                    //Effectuer un saut depuis le mur de gauche, sans aucune latence;
                                                    vsp = -global.jumpspeed;
                                                    walljumppower = 5;
                                                    hsp = 0.5;
                                                    STATUS = "double_jumping";
                                                    image_xscale=sign(walljumppower);
                                                    }
                                                }
                                            else{
                                                if place_meeting(x+max(1,abs(hsp)),y,object_wall){
                                                if STATUS = "walljump"{
                                                        //Effectuer un saut depuis le mur de droite.
                                                        vsp = -global.jumpspeed;
                                                        walljumppower = -5;
                                                        hsp = -0.5;
                                                        STATUS = "double_jumping";
                                                        image_xscale=sign(walljumppower);
                                                        }
                                                    }
                                                else{
                                                    if jumpcount &lt; 1{
                                                        if Can_jump{
                                                            //Effectuer un saut normal dans les airs.
                                                            //Plus possible sans item.
                                                            /*
                                                            vsp = -global.jumpspeed;
                                                            jumpcount ++;
                                                            Can_jump = false;
                                                            alarm_set(11,15);
                                                            STATUS = "double_jumping";
                                                            image_index = 0;
                                                            */
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        else{ //Donc là vous êtes sur le sol:
                                            if jumpcount &lt; 1{
                                                if Can_jump{
                                                    if STATUS = "divelanding"{
                                                        if !place_meeting(x,y-12,object_wall){
                                                            //On se relève en sautant mais va falloir remasteriser les contrôles:
                                                            STATUS = "jumpfromdive";
                                                            alarm_set(0,10);
                                                            image_speed = 0.5;
                                                            image_index = 0;
                                                            }
                                                        }
                                                    else{
                                                        //Effectuer un triple saut ou un saut normal. Le triple saut n'a pas d'implémentation prévue.
                                                        if triplejumptampon = 3{
                                                            //Effectuer un triple saut.
                                                            }
                                                        else{
                                                            //Effectuer un saut normal. Penser à l'incrémentation de la variable tampon de triple saut ?
                                                            alarm_set(0,3);
                                                            STATUS = "jumping";
                                                            image_speed = 0.4;
                                                            image_index = 0;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    //}
                                }
                            }
                        }   
                    }
                }
            }
        }
    }

//Implémentation de la hauteur de saut variable:
if STATUS != "rolling"{
    if STATUS != "jumpfromdive"{
        if STATUS != "divejumping"{
            if STATUS != "hurt"{
                if STATUS!="spinattack"{
                    if vsp &lt; 0{
                        if !key_jump_held{
                            vsp = max(vsp,-global.jumpspeed/2);
                            }
                        }
                    }
                }
            }
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///----------ATTAQUES VISUELLES----------:
//Ok avec ça Shai devrait pouvoir attaquer(du moins sur la partie visuelle qui déclenchera la partie non-visuelle):
if attack{
    if attackcount = 0{
        if !invincible{
            attackcount++;
            if STATUS != "unlookup"{
                if STATUS != "crawling"{
                    if STATUS != "crawlidle"{
                        if STATUS != "jumpfromcrawl"{
                            if STATUS != "rolling"{
                                if !(STATUS = "jumping" &amp;&amp; place_meeting(x,y+1,object_wall)){
                                    if STATUS != "jumpfromdive"{
                                        if STATUS != "divelanding"{
                                            if !place_meeting(x,y+1,object_wall){ //Si vous n'êtes pas sur le sol.
                                                if place_meeting(x-1,y,object_wall){
                                                    //Effectuer une attaque dive depuis le mur de gauche:
                                                    vsp = -global.jumpspeed;
                                                    walljumppower = (global.movespeed/2);
                                                    x=x+2;
                                                    STATUS = "divejumping";
                                                    image_speed = 0.12;
                                                    image_index=0;
                                                    image_xscale = sign(walljumppower);
                                                    }
                                                else{
                                                    if place_meeting(x+1,y,object_wall){
                                                        //Effectuer une attaque dive depuis le mur de droite
                                                        vsp = -global.jumpspeed;
                                                        walljumppower = -(global.movespeed/2);
                                                        x = x-2;
                                                        STATUS = "divejumping";
                                                        image_speed = 0.12;
                                                        image_index=0;
                                                        image_xscale = sign(walljumppower);
                                                        }
                                                    else{
                                                        if abs(move) &gt; 0.80 &amp;&amp; abs(hsp) &gt;= 3{
                                                            //Effectuer un dive jump depuis les airs !
                                                            vsp = -global.jumpspeed/2.5;
                                                            if abs(move) != 0{image_xscale= sign(move);}
                                                            walljumppower = image_xscale*(global.movespeed/2);
                                                            STATUS = "divejumping";
                                                            image_index=0;
                                                            image_speed = 0.12;
                                                            }
                                                        else{
                                                            //Do the spin attack;
                                                            vsp = -global.jumpspeed/2;
                                                            walljumppower +=(global.movespeed/4)*sign(image_xscale);
                                                            STATUS = "spinattack";
                                                            image_index = 0;
                                                            image_speed = 0.5
                                                            }
                                                        }
                                                    }
                                                }
                                            else{ //Donc si vous êtes sur le sol:
                                                if abs(move) &gt; 0.84 &amp;&amp; Can_jump{
                                                    //Effectuer une roulade:
                                                    STATUS = "rolling";
                                                    hsp += (global.movespeed*0.156)*image_xscale;
                                                    vsp = -(global.jumpspeed/6)
                                                    image_speed = 0.5;
                                                    image_index = 0;
                                                    }
                                                else{
                                                    if STATUS != "headshot"{
                                                        //Effectuer un headshot:
                                                        STATUS= "headshot";
                                                        waiting = 0;
                                                        image_index = 0;
                                                        image_speed = 0.4;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            else{
                                if image_index &gt;= 11{
                                    if STATUS != "headshot"{
                                        //Effectuer un headshot:
                                        STATUS= "headshot";
                                        waiting = 0;
                                        image_index = 0;
                                        image_speed = 0.4;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///----------COLLISIONS+JUMP RESET----------
// Horizontal platform:
repeat(abs(hsp_carry)) {
    if (!place_meeting(x + sign(hsp_carry), y, object_wall))
        x += sign(hsp_carry); 
    else {
        hsp_carry = 0;
        break;
        }
    }

// Vertical
repeat(abs(vsp)) {
    if (!place_meeting(x, y + sign(vsp), object_wall))
        y += sign(vsp); 
    else {
        vsp = 0;
        break;
        }
    }

// Horizontal
repeat(abs(hsp)) {
    /*
    // Move up slope
    if (place_meeting(x + sign(hsp), y, object_wall) &amp;&amp; place_meeting(x + sign(hsp), y - 1, object_wall) &amp;&amp; !place_meeting(x + sign(hsp), y - 2, object_wall))
        y -= 2;
    else if (place_meeting(x + sign(hsp), y, object_wall) &amp;&amp; !place_meeting(x + sign(hsp), y - 1, object_wall))
        --y;
    
    // Move down slope
    if (!place_meeting(x + sign(hsp), y, object_wall) &amp;&amp; !place_meeting(x + sign(hsp), y + 1, object_wall) &amp;&amp; !place_meeting(x + sign(hsp), y + 2, object_wall) &amp;&amp; place_meeting(x + sign(hsp), y + 3, object_wall))
        y += 2;
    else if (!place_meeting(x + sign(hsp), y, object_wall) &amp;&amp; !place_meeting(x + sign(hsp), y + 1, object_wall) &amp;&amp; place_meeting(x + sign(hsp), y + 2, object_wall))
        ++y; 
        */
        
    if (!place_meeting(x + sign(hsp), y, object_wall))
        x += sign(hsp); 
    else {
        hsp = 0;       
        break;
        }
    }

repeat(abs(walljumppower)) {    
    if (!place_meeting(x + sign(walljumppower), y, object_wall))
        x += sign(walljumppower); 
    else {
        walljumppower = 0;       
        break;
        }
    }
    
    
if !place_meeting(xprevious,yprevious+1,object_wall){
    if place_meeting(x,y+1,object_wall){
         Can_jump=true;
         jumpcount=0;
        }
    }  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///----------IMAGE XSCALE----------
//Gestion du sens de Shai, il ne faudrait pas qu'elle soit sens dessus dessous !
if STATUS != "stopping"{
    if STATUS != "crawlfromdive"{
        if STATUS != "unlookup"{
            if STATUS != "hurt"{
                if STATUS != "rolling"{
                    if STATUS != "divefall"{
                        if STATUS != "lookup"{
                            if STATUS != "divejumping"{
                                if STATUS != "divelanding"{
                                    if STATUS != "jumpfromdive"{
                                        if STATUS != "spinattack"{
                                            if STATUS != "headshot"{
                                                if STATUS != "landing"{
                                                    if STATUS != "pre_landing"{
                                                        if STATUS != "crawling"{
                                                            if STATUS != "crawlidle"{
                                                                if STATUS != "double_jumping"{
                                                                    if STATUS != "walljump"{
                                                                        if abs(hsp) &gt; 0.2{image_xscale = sign(hsp);}else{if hsp = 0 &amp;&amp; abs(move) != 0{image_xscale = sign(move);}}   
                                                                        
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///----------ANIMATIONS----------
//Gestion des STATUS de Shai:
if !life &lt;= 0{ //Si Shai n'est pas re-morte
    if STATUS != "crawling" &amp;&amp; STATUS != "crawlidle"{
        if STATUS != "stopping"{
            if STATUS != "unlookup"{
                if STATUS != "precrawl"{
                    if STATUS != "startpushing"{
                        if STATUS != "stoppushing"{
                            if STATUS != "rolling"{
                                if STATUS != "headshot"{
                                    if STATUS != "hurt"{
                                        if STATUS != "jumpfromdive"{
                                            if STATUS != "divefall"{
                                                if STATUS != "jumpfromcrawl"{
                                                    if STATUS != "divejumping"{
                                                        if STATUS != "divelanding"{
                                                            if STATUS != "crawlfromdive"{
                                                                    if STATUS  != "spinattack"{
                                                                        if STATUS != "jumping" &amp;&amp; STATUS != "double_jumping"{
                                                                            if place_meeting(x,y+1,object_wall){ //Si Shai a un pied sur terre
                                                                                if hsp = 0{ //Si l'on est immobile 
                                                                                    if looking &lt; -0.90{
                                                                                        if (STATUS != "crawling") &amp;&amp; (STATUS != "crawlidle"){
                                                                                            STATUS = "lookup";
                                                                                            image_speed = 0.070;
                                                                                            waiting = 0;
                                                                                            }
                                                                                        }
                                                                                    else{
                                                                                        if STATUS = "lookup"{
                                                                                            STATUS = "unlookup";
                                                                                            image_index = 0;
                                                                                            image_speed = 0.06;
                                                                                            }
                                                                                        else{
                                                                                            if looking &gt; 0.70{
                                                                                                if STATUS != "crawling" &amp;&amp; STATUS != "crawlidle"{
                                                                                                    STATUS = "precrawl";
                                                                                                    image_index = 0;
                                                                                                    image_speed = 0.5;
                                                                                                    }
                                                                                                }
                                                                                            else{
                                                                                                if abs(move) !=0{
                                                                                                    if STATUS != "pushing"{
                                                                                                        if STATUS != "startpushing"{
                                                                                                            if STATUS != "stoppushing"{
                                                                                                                if place_meeting(x+(12*sign(move)),y-10,object_wall){
                                                                                                                    STATUS = "startpushing";
                                                                                                                    image_index = 0;
                                                                                                                    image_speed = 0.5;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    else{
                                                                                                        image_speed = abs(move)/8;
                                                                                                        }
                                                                                                    }
                                                                                                else{
                                                                                                    if STATUS = "pushing"{
                                                                                                        STATUS = "stoppushing";
                                                                                                        image_index = 0;
                                                                                                        image_speed = 0.5;
                                                                                                        }
                                                                                                    else{
                                                                                                        if collision_line(x,y,x+(10*image_xscale),y+40,object_wall,false,true) = noone{
                                                                                                            STATUS = "ledge";
                                                                                                            image_speed = 0.15;
                                                                                                            }
                                                                                                        else{
                                                                                                            if uncontrol = -1{
                                                                                                                STATUS = "rotating";
                                                                                                                image_speed = 0.22;
                                                                                                                }
                                                                                                            else{
                                                                                                                if waiting &gt; 5{
                                                                                                                    if (waiting &gt; 10 &amp;&amp; waiting &lt; 10.1){
                                                                                                                        STATUS = "waiting_phase_2";
                                                                                                                        image_speed = 0.25;
                                                                                                                        }
                                                                                                                    else{
                                                                                                                        if waiting &gt; 18{
                                                                                                                            STATUS = "waiting_phase_3";
                                                                                                                            if image_index &lt; 1{
                                                                                                                                image_speed = 0.006;
                                                                                                                                }
                                                                                                                            else{
                                                                                                                                image_speed = 0.15;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                else{
                                                                                                                    if global.bossfight{
                                                                                                                        STATUS = "idle_bossfight";
                                                                                                                        image_speed = 0.033;
                                                                                                                        }
                                                                                                                    else{
                                                                                                                        STATUS = "idle";
                                                                                                                        image_speed = 0.225; 
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                else{ //Si l'on est pas immobile...
                                                                                    if ((sign(move) = 1 &amp;&amp; sign(hsp) = -1) || (sign(move) = -1 &amp;&amp; sign(hsp) = 1)&amp;&amp; STATUS="running"){
                                                                                        STATUS = "stopping";
                                                                                        image_index = 0;
                                                                                        image_speed = 0.3;                                                                                        }
                                                                                    else{
                                                                                        if abs(hsp) &gt; 3.4{
                                                                                            STATUS = "running";
                                                                                            image_speed = abs(hsp)/8
                                                                                            }
                                                                                        else{
                                                                                            STATUS = "walking";
                                                                                            image_speed = abs(hsp)/16
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            else{ //Si Shai a les jambes en l'air
                                                                                if place_meeting(x-1,y,object_wall) &amp;&amp; !place_meeting(x,y+maxjumpheight+1,object_wall){
                                                                                    if STATUS != "walljump"{  
                                                                                        STATUS = "walljump";
                                                                                        image_xscale= -1;
                                                                                        vsp=max(slipperywall,vsp);
                                                                                        //Déboguer la collision asymétrique:
                                                                                        while(place_meeting(x,y,object_wall)){
                                                                                            x++;
                                                                                            }   
                                                                                        }
                                                                                    }
                                                                                else{
                                                                                    if place_meeting(x+1,y,object_wall)&amp;&amp; !place_meeting(x,y+maxjumpheight+1,object_wall){
                                                                                        if STATUS != "walljump"{                               
                                                                                            STATUS = "walljump";
                                                                                            image_xscale= 1;
                                                                                            vsp=max(slipperywall,vsp);
                                                                                            //Déboguer la collision asymétrique:
                                                                                            while(place_meeting(x,y,object_wall)){
                                                                                                x--;    
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    else{
                                                                                        if vsp &gt; global.grav*3.3333{
                                                                                            
                                                                                            STATUS = "landing"; 
                                                                                            //Sous gestion des animations:
                                                                                            if move*image_xscale &lt; 0{ //Stick à gauche
                                                                                                if image_index &lt; 12{
                                                                                                    image_index = 12;
                                                                                                    image_speed = 0.5;
                                                                                                    }
                                                                                                }
                                                                                            else{
                                                                                                if move*image_xscale &gt; 0{ //Stick à droite
                                                                                                    if image_index &lt; 6 || image_index &gt; 11{
                                                                                                        image_index = 6;
                                                                                                        image_speed = 0.5;
                                                                                                        }
                                                                                                    }
                                                                                                else{ //Stick au milieu
                                                                                                    if image_index &gt; 5{
                                                                                                        image_index = 0;
                                                                                                        image_speed = 0.5;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        else{
                                                                                            if abs(vsp) &lt;= global.grav*3.3333{
                                                                                                STATUS = "pre_landing";
                                                                                                image_index = 0;
                                                                                                image_speed = 0.5;
                                                                                                }
                                                                                            else{//vsp est supérieur à la valeur voulue:
                                                                                                if STATUS = "walljump"{
                                                                                                    STATUS="jumping";
                                                                                                    image_index=5;
                                                                                                    image_speed=0;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        else{
                                                                            if !place_meeting(x,y+1,object_wall){
                                                                                if place_meeting(x-1,y,object_wall) &amp;&amp; !place_meeting(x,y+maxjumpheight+1,object_wall){
                                                                                    if STATUS != "walljump"{    
                                                                                        STATUS = "walljump";
                                                                                        image_xscale= -1;
                                                                                        vsp=max(slipperywall,vsp);
                                                                                        //Déboguer la collision asymétrique:
                                                                                        while(place_meeting(x,y,object_wall)){
                                                                                            x++;
                                                                                            }    
                                                                                        }
                                                                                    }
                                                                                else{
                                                                                    if place_meeting(x+1,y,object_wall) &amp;&amp; !place_meeting(x,y+maxjumpheight+1,object_wall){                 
                                                                                        if STATUS != "walljump"{
                                                                                            STATUS="walljump";
                                                                                            image_xscale= 1;
                                                                                            vsp=max(slipperywall,vsp);
                                                                                            //Déboguer la collision asymétrique:
                                                                                            while(place_meeting(x,y,object_wall)){
                                                                                                x--;
                                                                                                }   
                                                                                            }
                                                                                        }
                                                                                    else{
                                                                                        if vsp &gt; global.grav*3.3333{
                                                                                                
                                                                                                STATUS = "landing"; 
                                                                                                //Sous gestion des animations:
                                                                                                if move*image_xscale &lt; 0{ //Stick à gauche
                                                                                                    if image_index &lt; 12{
                                                                                                        image_index = 12;
                                                                                                        image_speed = 0.5;
                                                                                                        }
                                                                                                    }
                                                                                                else{
                                                                                                    if move*image_xscale &gt; 0{ //Stick à droite
                                                                                                        if image_index &lt; 6 || image_index &gt; 11{
                                                                                                            image_index = 6;
                                                                                                            image_speed = 0.5;
                                                                                                            }
                                                                                                        }
                                                                                                    else{ //Stick au milieu
                                                                                                        if image_index &gt; 5{
                                                                                                            image_index = 0;
                                                                                                            image_speed = 0.5;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            else{
                                                                                                if abs(vsp) &lt;= global.grav*3.3333{
                                                                                                    STATUS = "pre_landing";
                                                                                                    image_speed = 0.5;
                                                                                                    }
                                                                                                else{//On assume qe la valeur est positive.
                                                                                                    if STATUS ="walljump"{
                                                                                                        STATUS="jumping";
                                                                                                        image_index=5;
                                                                                                        image_speed=0;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }  
                                                                            }
                                                                        else{
                                                                            if place_meeting(x,y+1,object_wall){
                                                                                STATUS="idle";
                                                                                image_speed = 0.225;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                else{
                                                                    //Cela signifie que l'on est en divelanding. On doit pouvoir switcher de mode via le crawling.
                                                                    if looking &gt; 0.7{
                                                                        STATUS = "crawlfromdive";
                                                                        image_index = 0;
                                                                        image_speed = 0.2;
                                                                        }
                                                                    }
                                                                }
                                                            else{
                                                                if place_meeting(x+(image_xscale*2),y,object_wall){
                                                                    hurt =(2*hsp*-image_xscale);
                                                                    }
                                                                else{ 
                                                                    if place_meeting(x,y+1,object_wall){
                                                                        STATUS = "divelanding";
                                                                        image_index = 0;
                                                                        image_speed = 0.28;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    else{
                                                        if place_meeting(x,y+1,object_wall){
                                                            STATUS = "divelanding";
                                                            image_index = 0;
                                                            image_speed = 0.28;
                                                            }
                                                        }
                                                    }
                                                }
                                            else{
                                                if place_meeting(x,y+1,object_wall){
                                                    STATUS = "stopping";
                                                    image_index = image_number-1;
                                                    image_speed = -0.3;
                                                    }
                                                }
                                            }
                                        else{
                                            if image_index &gt;= 4{
                                                if !place_meeting(x+(0.6*image_xscale),y,object_wall){
                                                    x+=0.6*image_xscale;
                                                    }
                                                }
                                            }
                                        }
                                    else{
                                        //Proposer la possibilité de faire un saut dès la fin de la roulade.
                                        if key_jump{
                                            temp_jump = true;
                                            }
                                            
                                        if image_index &gt;= 19{
                                            if place_meeting(x,y-15,object_wall){
                                                    STATUS ="crawling";
                                                    image_index = 0;
                                                    image_speed=0;
                                                }
                                            }
                                        else{
                                            //Gérer les étapes de la roulade:
                                            if image_index &gt;= 3 &amp;&amp; image_index &lt;4{
                                                //Vérifier si elle est au sol:
                                                if !place_meeting(x,y+1,object_wall){
                                                    image_index = 3;
                                                    }
                                                }
                                            else{
                                                if place_meeting(x,y+1,object_wall){
                                                    if image_index &gt;= 19{
                                                        if looking &gt; 0.7{
                                                            STATUS = "crawling";
                                                            }
                                                        }
                                                        
                                                    
                                                    if vsp &gt; global.grav*5{
                                                        STATUS = "pre_landing";
                                                        image_index = 0;
                                                        image_speed = 0.5;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    else{
                        if object_camera.y-y=0{
                            STATUS="idle"
                            image_speed = 0.225;
                            }
                        }
                    }
                else{
                    if image_speed &lt; 0{
                        if (image_index &gt;=0 &amp;&amp; image_index &lt; 1){
                            image_index = 0;
                            image_speed = 0;
                            }
                        }
                    else{
                        if (image_speed &gt; 0){
                            if image_index &gt;= image_number-1{
                                image_speed=0;
                                image_index = image_number-1;
                                }
                            }
                        }
                    if sign(hsp) = sign(move){
                        if abs(sign(hsp)) = 1{
                            STATUS = "walking";
                            }
                        else{
                            STATUS ="idle";
                            image_speed = 0.225;
                            }
                        }
                    }
                }
            else{
                //Ici je place les trigers pour les crawls:
                if looking &gt; 0.7 || place_meeting(x,y-15,object_wall){
                    image_speed=(abs(hsp)/5)*sign(hsp)*sign(image_xscale);
                    if hsp = 0{STATUS = "crawlidle"}else{STATUS="crawling"}
                    }
                else{
                    //On se relève
                    STATUS = "jumpfromcrawl";
                    image_index = 0;
                    image_speed=0.5;
                    }
                
                }
            }
            
            
//angle for dive jumping:
if STATUS = "divejumping" &amp;&amp; vsp &gt; 0{
    if image_angle &lt; 45 &amp;&amp; image_xscale = -1{
        image_angle ++;
        }
    else{
        if image_angle &gt; -45 &amp;&amp; image_xscale = 1{
            image_angle --;
            }
        }
    if abs(image_angle) = 45{
        STATUS = "divefall";
        image_angle = 0;
        }
    }
else{
    image_angle = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de vibrations : est fait au cas par cas.
//Doit être recodé pour chaque animation:
/*
switch(STATUS){
    case "walking":
        switch(floor(image_index)){
            case 5:
            case 6:
            case 13:
            case 14:
                gamepad_set_vibration(ID,0.15,0.15);
                break;
            
            default:
                gamepad_set_vibration(ID,0,0);
            }
        break;
    
    case "running":
        switch(floor(image_index)){
            case 7:
            case 8:
            case 9:
            case 19:
            case 20:
            case 21:
                gamepad_set_vibration(ID,0.3,0.3);
                break;
                
            default:
                gamepad_set_vibration(ID,0,0);
            }
        break;
        
    case "crawling":
        switch(floor(image_index)){
            case 2:
            case 5:
            case 6:
                gamepad_set_vibration(ID,0.15,0.15);
                break;
                
            default:
                gamepad_set_vibration(ID,0,0);
            }
        break;
        
    case "hurt":
        gamepad_set_vibration(ID,0.8,0.8);
        break;
        
    case "walljump":
        sacade=6;
        gamepad_set_vibration(ID,(sign(vsp)*0.13+(floor(vsp)/3))*vibrate,(sign(vsp)*0.13+(floor(vsp)/3))*vibrate);
        break;
        
    case "stopping":
        sacade=10;
        gamepad_set_vibration(ID,0.2*vibrate,0.2*vibrate);
        break;
    
    case "headshot":
        if floor(image_index) = 5{
            gamepad_set_vibration(ID,1,1);
            }
        else{
            gamepad_set_vibration(ID,0,0);
            }
        break;
        
    case "divelanding":
        switch(floor(image_index)){
            case 0:
                gamepad_set_vibration(ID,1,1);
                break;
            
            default:
                sacade=6;
                gamepad_set_vibration(ID,0.3,0.3);
                break;
            }
        break;
        
        
    default:
        sacade=1;
        gamepad_set_vibration(ID,0,0);
    } */

    
    
    
    
    
    
   
/*    
switch(STATUS){
    case "walking":
        for(i=0;i&lt; array_length_1d(walking_frames);i++){
            if floor(image_index_previous) &lt; walking_frames[i] &amp;&amp; floor(image_index) = walking_frames[i]{
                gamepad_vibrate(ID,0.18,0.18,4);
                }
            }
        break;
        
    case "running":
        for(i=0;i&lt; array_length_1d(running_frames);i++){
            if floor(image_index_previous) &lt; running_frames[i] &amp;&amp; floor(image_index) = running_frames[i]{
                gamepad_vibrate(ID,0.18,0.18,4);
                }
            }
        break;    
        
    case "headshot":
        for(i=0;i&lt; array_length_1d(headshot_frames);i++){
            if floor(image_index_previous) &lt; headshot_frames[i] &amp;&amp; floor(image_index) = headshot_frames[i]{
                gamepad_vibrate(ID,1,1,5);
                }
            }
        break;
    
    case "jumping":
        for(i=0;i&lt; array_length_1d(jump_frames);i++){
            if floor(image_index_previous) &lt; jump_frames[i] &amp;&amp; floor(image_index) = jump_frames[i]{
                gamepad_vibrate(ID,0.35,0.35,5);
                }
            }
        break;
        
    case "crawling":
        for(i=0;i&lt; array_length_1d(crawling_frames);i++){
            if floor(image_index_previous) &lt; crawling_frames[i] &amp;&amp; floor(image_index) = crawling_frames[i]{
                gamepad_vibrate(ID,0.15,0.15,4);
                }
            }
        break;
    
    case "walljump":
        sacade=20;
        gamepad_set_vibration(ID,(sign(vsp)*0.13+(floor(vsp)/3))*vibrate,(sign(vsp)*0.13+(floor(vsp)/3))*vibrate);
        break;
        
    
    
    default:
        gamepad_set_vibration(ID,0,0);
        break;
    
    }    
    
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de gestion technique de l'attaque:
//Hey hey ça vous dit d'aller aggresser des ptizanimos sans défense ?
//Module légèrement nettoyé:
switch(STATUS){
    case "headshot":
        if (image_index &gt;= 2) &amp;&amp; (image_index &lt; 3){
            if !instance_exists(object_hit){
                instance_create(x+(-22*image_xscale),y-11,object_hit);
                object_hit.image_xscale = 14*image_xscale;
                object_hit.image_yscale = 20;
                }
            else{
                object_hit.x = x-(22*image_xscale);
                object_hit.y = y-11;
                object_hit.image_xscale = 14*image_xscale;
                object_hit.image_yscale = 20;
                }
            }
        else{
            if (image_index &gt;= 3) &amp;&amp; (image_index &lt; 4){
                if !instance_exists(object_hit){
                    instance_create(x+(-21*image_xscale),y-11,object_hit);
                    object_hit.image_xscale = 27*image_xscale;
                    object_hit.image_yscale = 18;
                    }
                else{
                    object_hit.x = x-(21*image_xscale);
                    object_hit.y = y-11;
                    object_hit.image_xscale = 27*image_xscale;
                    object_hit.image_yscale = 18;
                    }
                }
            else{
                if (image_index &gt;= 4) &amp;&amp; (image_index &lt; 5){
                    if !instance_exists(object_hit){
                        instance_create(x+(-13*image_xscale),y-12,object_hit);
                        object_hit.image_xscale = 37*image_xscale;
                        object_hit.image_yscale = 22;
                        }
                    else{
                        object_hit.x = x-(13*image_xscale);
                        object_hit.y = y-11;
                        object_hit.image_xscale = 37*image_xscale;
                        object_hit.image_yscale = 22;
                        }
                    }
                else{
                    if (image_index &gt;= 5) &amp;&amp; (image_index &lt; 7){
                        if !instance_exists(object_hit){
                            instance_create(x+(11*image_xscale),y-13,object_hit);
                            object_hit.image_xscale = 13*image_xscale;
                            object_hit.image_yscale = 22;
                            }
                        else{
                            object_hit.x = x+(11*image_xscale);
                            object_hit.y = y-13;
                            object_hit.image_xscale = 13*image_xscale;
                            object_hit.image_yscale = 22;
                            }
                        }
                    else{
                        if instance_exists(object_hit){instance_destroy(object_hit);}
                        }
                    }
                }
            }
        break;
        
    case "spinattack":
        //Attaque bouboule, passible de que dalle:
        if !instance_exists(object_hit){
            instance_create(x-(12*image_xscale),y,object_hit);
            object_hit.image_xscale=28*image_xscale;
            object_hit.image_yscale=26;
            }
        else{
            object_hit.x = x-(12*image_xscale);
            object_hit.y = y;
            object_hit.image_xscale=28*image_xscale;
            object_hit.image_yscale=26;
            }
        break;
        
    case "divejumping":
        if (image_index) &gt;= 3{
            //Attaque diive jumping, passable de déchirage de pull:
            if !instance_exists(object_hit){
                instance_create(x-(5*image_xscale),y+2,object_hit);
                object_hit.image_xscale = 23*image_xscale;
                object_hit.image_yscale = 26;
                }
            else{
                object_hit.x = x-(5*image_xscale);
                object_hit.y = y+2;
                object_hit.image_xscale=23*image_xscale;
                object_hit.image_yscale=26;
                }
            }
        else{
            if instance_exists(object_hit){instance_destroy(object_hit);}
            }
        break;
        
    case "rolling":
        if (image_index &gt;= 4)&amp;&amp;(image_index &lt; 11){
            //On fait  une roulade bien trop pété.
            if !instance_exists(object_hit){
                instance_create(x-(12*image_xscale),y,object_hit);
                object_hit.image_xscale=28*image_xscale;
                object_hit.image_yscale=25;
                }
            else{
                object_hit.x = x-(12*image_xscale);
                object_hit.y = y;
                object_hit.image_xscale=28*image_xscale;
                object_hit.image_yscale=25;
                }
            }
        else{
            if instance_exists(object_hit){instance_destroy(object_hit);}
            }
        break;
    
    case "divefall":
        //Attaque diive fall, passable de déchirage de pull:
        if !instance_exists(object_hit){
            instance_create(x-(5*image_xscale),y+2,object_hit);
            object_hit.image_xscale = 23*image_xscale;
            object_hit.image_yscale = 26;
            }
        else{
            object_hit.x = x-(5*image_xscale);
            object_hit.y = y+2;
            object_hit.image_xscale=23*image_xscale;
            object_hit.image_yscale=26;
            }
        break;
        
    default:
        if instance_exists(object_hit){instance_destroy(object_hit);}
        //Reste des attaques, ajoutables à l'infini.
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de gestion du temps d'inactivité.
//Increment waiting time:
if x = xprevious &amp;&amp; y = yprevious &amp;&amp; STATUS != "pushing" &amp;&amp; STATUS != "startpushing" &amp;&amp; STATUS != "stoppushing" &amp;&amp; STATUS != "crawlidle" &amp;&amp; STATUS !="precrawl" &amp;&amp; STATUS !="crawlidle" &amp;&amp; STATUS != "jumpfromcrawl" {waiting += 0.012;}else{waiting = 0;}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ah c'est con Shai est morte² !
                
if STATUS = "hurt_death"{
    if place_meeting(x,y+1,object_wall){
        //S'allonger
        STATUS = "laying_death";
        image_index = 0;
        image_speed = 0.2;
        show_debug_message("Je suis mis à zéro !");
        Can_up = false;
        }
    }
else{
    if STATUS = "deathup"{
        //Là Shai se lève magiquement
        if !Can_up{
            if image_index &gt;= image_number-1{
                Can_up = true;
                }
            }
        if Can_up{
            y--;
            }
        }      
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de gestion des frictions/gravité death edition !:
//Accelérer c'est bien beau mais faut freiner aussi, avec la friction ! :
if STATUS = "hurt_death" || STATUS = "laying_death"{
    //Friction pour la vitesse normale.
    hsp = max(0,abs(hsp)-global.frict*2)*sign(hsp);
        
    //Ajout de friction si l'on possède de la propulsion depuis un mur:
    walljumppower = max(0,abs(walljumppower)-global.frict)*sign(walljumppower);
    
    //Et voici la gravité !
    //Vsp
    if vsp &lt; 9{vsp+=global.grav}
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de hurt death:
if STATUS != "hurt_death"{
    if abs(hurt) != 0{
        image_speed = 0.4;
        hsp = 5*sign(hurt);
        vsp = -3;
        hurt= 0 ;
        image_xscale = sign(hsp) * -1;
        STATUS = "hurt_death";
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module de collisions death edition:
//Ok maintenant vous devez éviter de passer entre les murs.
if STATUS = "hurt_death" ||STATUS = "laying_death"{
    //Collision verticale: L'utilisation d'un statement "while" peut conduire à un crash.
    if (!place_meeting(x,y+(vsp),object_wall)){
        if (!place_meeting(x,y+sign(vsp),object_wall)){
            y += vsp;
            }
        else{
            vsp = 0;
            }
        }
    else{
        while (!place_meeting(x,y+sign(vsp),object_wall)){
            y += sign(vsp);
            }
        if place_meeting(x,y+sign(vsp),object_wall){
            vsp = 0;
            }
        }
        
    //Collision horizontale: Doit intégrer le support des pentes même si j'ai pas l'impression que cela va être utilisé.
    if (!place_meeting(x+(hsp+walljumppower),y,object_wall)){
        if (!place_meeting(x+sign(hsp+walljumppower),y,object_wall)){
            x += (hsp+walljumppower);
            }
        else{
            hsp = 0;
            walljumppower =0;
            }
        }
    else{
        if place_meeting(x,y+1,object_wall){
            yrealplus = 3;
            while(place_meeting(x+(hsp+walljumppower),y-yrealplus,object_wall) &amp;&amp; yrealplus &lt; 10){
                yrealplus += 1;
                }
            if (place_meeting(x+(hsp+walljumppower),y-yplus,object_wall)){
                if (!place_meeting(x+sign(hsp+walljumppower),y-yplus,object_wall)){
                    x += sign(hsp+walljumppower);
                    }
                else{
                    hsp = 0;
                    walljumppower = 0;
                    }
                }
            else{
                x += (hsp+walljumppower);
                y -= yrealplus;
                }
            }
        else{
            if (!place_meeting(x+sign(hsp+walljumppower),y,object_wall)){
                x += sign(hsp+walljumppower);
                }
            else{
                hsp = 0;
                walljumppower =0;
                }
            }
        }
            
    //Correctif du système de collision en bois:
    if place_meeting(x,y,object_wall){if next_right = true &amp;&amp; next_left != true{x -=2;}else{if next_right != true &amp;&amp; next_left = true{x +=2;}}}
        
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase de débug et endroit tranquille pour des tests de code.

if keyboard_check_pressed(vk_left){
    room_speed --;
    show_debug_message(keyboard_string);
    }
    
if keyboard_check_pressed(vk_add){
    //Input buffering
    keyboard_string = "";
    show_debug_message("Inputs cleared !");
    }

if keyboard_check_pressed(vk_enter){
print_debug("[CHEAT] Command triggered: "+keyboard_string);
    switch(keyboard_string){
        
        case "leaves":
            instance_create(x,y-100,object_leaves);
            break;
        
        case "lag":
            instance_create(x,y,object_lag);
            break;
        
        case "DIE":
            life=0;
            hurt=-2;
            break;
        
        case "background":
            instance_create(0,0,object_test_backgrounds);
            break;
            
        case "view":
            if !view_visible[1]{
                view_visible[1]=true;
                }
            else{
                view_visible[1]=false;
                }
            break;
        default:   
            print_warning("[CHEAT] No command for "+keyboard_string);
            break;
        }
    }





if debugbutton {
    if debug &lt;1{
        debug ++;
        }
    else{
        debug = 0;
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Module d'animation:
//The one line animator:
sprite_index = asset_get_index("sprite_"+STATUS);
if sprite_index = -1{sprite_index = sprite_TPose;}

//Gérer le image_index_previous:
image_index_previous=image_index;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera for V4 (Enfin retravaillé parce que j'ai eu une illumination)

if !instance_exists(object_pause){
    if STATUS != "death_predown"{
        if STATUS != "deathdown"{
            
            //Follow xplayerposition
            object_camera.x = ceil(x)
            //Apply some exception ?
            //object_camera.x =  
            
            //rounding player vertical position
            y = round(y);
            
            //Suivre la position y de Shai
            if STATUS = "lookup" &amp;&amp; sprite_index &gt; 1{
                        if instance_exists(object_fond_shop){
                            //Let's create a smooth scroll instead:
                            if object_camera.y-object_player.y &lt; 59{
                                object_camera.y += min(3,(y+59)-object_camera.y);
                                }
                            }
                        else{
                            //Là Shai regarde en l'air donc on doit faire en sorte que la camera se barre vers le haut
                            object_camera.y -= min(3,object_camera.y-(y-80));
                            }
                        }
                    else{
                        if STATUS = "unlookup"{
                            //Là Shai BAISSE LES YEUX ! JE T'AI DIS BAISSE LES YEUX !
                            if object_camera.y -y &lt; 0{
                                object_camera.y += min(3,y-object_camera.y);
                                }
                            else{
                                //Dans le cas ou l'on fait face à un vendeur:
                                object_camera.y -= min(3,object_camera.y-y);
                                }
                            }
                        else{
                            object_camera.y = y;
                            }
                        }
            
            
            
            
            //object_camera.y = round(object_camera.y);
            //Nouveau système de view, géré avec le code plutôt que par l'UI
            view_xview[ID]=object_camera.x-(view_wview[ID]/2);
            view_yview[ID]=floor(object_camera.y-(view_hview[ID]/2));
            
            //Limites:
            view_xview[ID]=clamp(view_xview[ID],0,room_width-view_wview[ID]);
            view_yview[ID]=clamp(view_yview[ID],0,room_height-view_hview[ID]);
            }
        }
    }




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parallax background: Need to be reworked for aspect ratio:
if instance_exists(object_background){
    with(object_background){
        //Placement
        x=(view_xview[0]*Xaxis)+Xoffset+global.background_xoffset;
        //Si l'on est en dehors sur la gauche de l'écran:
        while(x+sprite_width&lt;view_xview[0]*abs(htiled-1)){
            x+=sprite_width;
            }
        
        //Si l'on est en dehors sur la haut de l'écran:
        y=(view_yview[0]*Yaxis)+Yoffset+global.background_yoffset;
        while(y+sprite_height&lt;view_yview[0]*abs(vtiled-1)){
            y+=sprite_height;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On démembre Shai !
if life &lt;=0{
    if !instance_exists(object_head){
        ///On crée les différents éléments de Shai démembrée !
        instance_create(x+irandom(9)-4,y,object_head);
        instance_create(x+irandom(9)-4,y,object_chest);
        instance_create(x+irandom(9)-4,y,object_left_arm);
        instance_create(x+irandom(9)-4,y,object_right_arm);
        instance_create(x+irandom(9)-4,y,object_left_leg);
        instance_create(x+irandom(9)-4,y,object_right_leg);
        
        //Donc maintenant il faut que les morceaux volent !
        alarm_set(7,120);
        //La vitesse:
        object_head.speed = random_range(3,6);
        object_chest.speed = random_range(3,6);
        object_left_arm.speed = random_range(3,6);
        object_right_arm.speed = random_range(3,6);
        object_left_leg.speed = random_range(3,6);
        object_right_leg.speed = random_range(3,6);
        
        object_head.direction = random_range(55,125);
        object_chest.direction = random_range(55,125);
        object_left_arm.direction = random_range(55,125);
        object_right_arm.direction = random_range(55,125);
        object_left_leg.direction = random_range(55,125);
        object_right_leg.direction = random_range(55,125);
        
        object_head.friction=object_head.speed/(alarm[7]);
        object_chest.friction=object_chest.speed/(alarm[7]);
        object_left_arm.friction=object_left_arm.speed/(alarm[7]);
        object_right_arm.friction=object_right_arm.speed/(alarm[7]);
        object_left_leg.friction=object_left_leg.speed/(alarm[7]);
        object_right_leg.friction=object_right_leg.speed/(alarm[7]);
        
        
        }
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///----------SWITCH ANIMATIONS----------
switch(STATUS){
    case "waiting":
    case "unlookup":
    case "jumpfromcrawl":
    case "stoppushing":
        STATUS = "idle";
        image_speed = 0.225;
        break;
    
    case "divejumping":
        image_index = 5;
        break;
        
    case "divelanding":
        image_index = 6;
        image_speed = 0;
        break;
        
    case "waiting_phase_2":
        image_index = 11;
        break;
    
    case "startpushing":
        STATUS = "pushing";
        break;
        
    case "precrawl":
        if looking &gt; 0.7{
            STATUS = "crawlidle";
            }
        else{
            STATUS = "jumpfromcrawl";
            }
        break;
    
    case "jumpfromdive":
        STATUS = "jumping";
        image_index = 2;
        image_speed = 0.5;
        break;
        
    case "pre_landing":
        image_index = 1;
        image_speed = 0;
        break;
        
    case "jumping":
    case "double_jumping":
        image_index = 5;
        break;
            
        case "headshot":
            STATUS = "idle";
            image_speed = 0.1;
            alarm_set(10,10);
            break;
            
        case "spinattack":
            if !global.face2_long[ID]{
                if (vsp &lt; -global.grav){
                    STATUS = "jumping";
                    }
                else{
                     if (abs(vsp) &lt; 1){
                        STATUS = "pre_landing";
                        }
                    else{
                        if vsp &gt;= 1{
                            STATUS = "landing";
                            }
                        }
                    }
                }
            break;
            
        case "rolling":
            if temp_jump{
                //Then do a jump;
                STATUS = "jumping";
                image_index = 2;
                image_speed= 0.5;
                vsp = -global.jumpspeed;
                hsp = image_xscale*2;
                jumpcount ++;
                Can_jump = false;
                alarm_set(11,15);
                }
            else{
                //Transition over running or walking;
                if hsp &gt; 3.5{
                    STATUS = "running";
                    }
                else{
                    if abs(hsp) &gt; 0{
                        STATUS = "walking";
                        }
                    else{
                        STATUS = "idle";
                        image_speed = 0.225;
                        }
                    }
                }
            temp_jump = 0;
            break;
            
        case "crawlfromdive":
            if abs(move) != 0{
                STATUS = "crawling";
                }
            else{
                STATUS = "crawlidle";
                }    
            break;
            
            
        case "laying_death":
            STATUS = "deathup";
            image_speed = 0.3;
            alarm_set(9,100);
            break;
            
        case "death_predown":
            STATUS = "deathdown";
            image_speed = 0.5;
            break;
            
        case "deathup":
            image_index = image_number-1;
            image_speed=0;
                
        }
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,ceil(x),ceil(y),image_xscale,image_yscale,image_angle,c_white,1);

//Debug:
draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,true);
//draw_point_colour(bbox_left+12*sign(move),y,c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
