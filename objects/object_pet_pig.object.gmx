<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_pig_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>object_pet_fox</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Définition des variables:
hsp = 0;
wantedHsp = 0;
vsp = 0;

//Initialize AI
alarm[0] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Arbre de l'IA:
if sprite_index != sprite_pig_dead{
    
    DistanceFromPlayer = distance_to_object(object_player);
    DirectionOppositeFromPlayer = sign(x-object_player.x);
    DirectionToPlayer = DirectionOppositeFromPlayer*(-1);
    
    //Default wantedHsp
    if abs(wantedHsp) &gt; 0{
        wantedHsp = choose(wantedHsp,0);
        }
    else{
        wantedHsp = choose(-2, 0, 2);
        }
    
        
    if DistanceFromPlayer &lt;= 35{
        if object_player.goodness &lt; 30{
            //Scared
            wantedHsp = 3*DirectionOppositeFromPlayer;
            }
        else{
            if object_player.goodness &gt; 70{
                //Curious
                wantedHsp = 1*DirectionToPlayer; 
                }
            }
        }
    
    if wantedHsp != 0{
        image_xscale=sign(wantedHsp);
        }
        
    alarm[0]=90;
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///APPLY ACCELERATION 
hsp += sign(wantedHsp-hsp)*0.25;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ANALYSE DE L'ENVIRONNEMENT
if sprite_index != sprite_pig_dead{
    if abs(hsp) != 0{
        if place_meeting(x,y+1,object_wall){
            if !position_meeting(x+(sprite_width/2)+floor(abs(hsp))*image_xscale,bbox_bottom+1,object_wall){
                if (collision_rectangle(x-(sprite_width/2),bbox_top-PET_MAX_JUMP,x+(sprite_width/2)+(PET_MAX_DIST*image_xscale),bbox_bottom,object_wall,false,true) = noone) 
                &amp;&amp; place_meeting(x+(PET_MAX_DIST*image_xscale),y+1,object_wall){
                    //Jump
                    vsp = (-4);
                    alarm[0] = 60;  
                    }
                else{
                    if !position_meeting(x+(sprite_width/2)+PET_STOP_DIST*image_xscale,bbox_bottom+PET_MAX_JUMP,object_wall){
                        wantedHsp = 0;
                        if !position_meeting(x+(sprite_width/2)+image_xscale,bbox_bottom+PET_MAX_JUMP,object_wall){
                            hsp = 0;
                            }
                        }
                    }
                }
            else{
                if place_meeting(x+(PET_MAX_DIST/2)*image_xscale,y,object_wall){
                    if !place_meeting(x+(PET_MAX_DIST/2)*image_xscale,y-PET_MAX_JUMP,object_wall){
                        //Jump
                        vsp = (-4);
                        alarm[0] = 60;
                        }
                    }
                }  
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----COLLISIONS + GRAVITÉ-----  
// Verticale
repeat(floor(abs(vsp))) {
    if (!place_meeting(x, y + sign(vsp), object_wall))
        y += sign(vsp); 
    else {
        vsp = 0;
        break;
        }
    }
// Horizontal
repeat(floor(abs(hsp))) {
    if (!place_meeting(x + sign(hsp), y, object_wall))
        x += sign(hsp); 
    else {
        hsp = 0;
        wantedHsp = 0;                                        
        break;
        }
    }

//Gravité
vsp += sign(9-vsp)*0.4;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----ANIMATIONS-----
if sprite_index != sprite_pig_dead{
     if floor(abs(hsp)) &gt; 0{
        sprite_index = sprite_pig_run;
        image_speed = 0.075*floor(abs(hsp));
        }
    else{
        sprite_index = sprite_pig_idle;
        image_speed = 0;
        }
    }    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEATH
if sprite_index != sprite_pig_dead{
    if place_meeting(x,y,object_hit){
        
        if instance_exists(object_pet_fox){
            with(object_pet_fox){
                wantedHsp = sign(x-object_player.x)*3;
                alarm[0] = 120;
                }
            }
            
        sprite_index = sprite_pig_dead;
        hsp = sign(x-object_player.x)*3;
        wantedHsp = 0
        
        //La valeur est arbitraire pour le coup.
        object_player.goodness -= 10;
            
            
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
